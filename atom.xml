<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuYang&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/a2b2e91fc3b2fce1b054fb5c8a17e2fa</icon>
  <subtitle>探索，分享，创新——追求卓越</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://handsomeliuyang.github.io/"/>
  <updated>2018-06-12T12:51:07.000Z</updated>
  <id>https://handsomeliuyang.github.io/</id>
  
  <author>
    <name>刘阳</name>
    <email>40610243@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MPVue源码分析</title>
    <link href="https://handsomeliuyang.github.io/2018/06/07/MPVue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://handsomeliuyang.github.io/2018/06/07/MPVue源码分析/</id>
    <published>2018-06-07T06:34:35.000Z</published>
    <updated>2018-06-12T12:51:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>使用Vue实现一个消息逆转的demo：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"reverseMessage"</span>&gt;</span>逆转消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">message</span>: <span class="string">'Hello Vue.js!'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    <span class="attr">reverseMessage</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.message = <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>You can <a href="https://codepen.io/handsomeliuyang/pen/RJGejj?editors=1010" target="_blank" rel="noopener">try it on CodePen</a>.</p><p>同样的效果，使用小程序实现的代码为：</p><ol><li>小程序的整体结构如下所示：<br> :<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/07/MPVue源码分析/小程序的代码结构.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p>App相关的代码：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js文件</span></div><div class="line">App(&#123;</div><div class="line">  <span class="attr">onLaunch</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"App onLaunch..."</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">onShow</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"App onShow..."</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">onHide</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"App onHide..."</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">onError</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"App onError..."</span>);</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure> <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// app.json</div><div class="line">&#123;</div><div class="line">  "pages":[</div><div class="line">    "pages/index/index"</div><div class="line">  ],</div><div class="line">  "window":&#123;</div><div class="line">    "backgroundTextStyle":"light",</div><div class="line">    "navigationBarBackgroundColor": "#fff",</div><div class="line">    "navigationBarTitleText": "WeChat",</div><div class="line">    "navigationBarTextStyle":"black"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure> <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// app.wxss</div><div class="line">.container &#123;</div><div class="line">  height: 100%;</div><div class="line">  display: flex;</div><div class="line">  flex-direction: column;</div><div class="line">  align-items: center;</div><div class="line">  justify-content: space-between;</div><div class="line">  padding: 200rpx 0;</div><div class="line">  box-sizing: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Page相关的代码：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"usermotto"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"user-motto"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"reverseMessage"</span>&gt;</span>逆转消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line">Page(&#123;</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">message</span>: <span class="string">'Hello Wechat!'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//生命周期函数</span></div><div class="line">  onLoad: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Page onLoad..."</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">onReady</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Page onReady..."</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//事件处理函数</span></div><div class="line">  reverseMessage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// this.data.message = this.data.message.split('').reverse().join('')</span></div><div class="line">    <span class="keyword">this</span>.setData(&#123; <span class="attr">message</span>: <span class="keyword">this</span>.data.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure> <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**index.wxss**/</span></div><div class="line"><span class="selector-class">.usermotto</span> &#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h1 id="小程序简介"><a href="#小程序简介" class="headerlink" title="小程序简介"></a>小程序简介</h1><p>Vue与小程序都可以看成javascript的高级抽象，类似于java里的各种框架，想让基于Vue开发的代码运行在小程序里，就把Vue的低层映射到小程序的Api，而不是Web端的Dom。</p><p>先来分析小程序的框架体系：</p><ol><li>目录结构：包括App相关的三个文件，每个Page包括三个文件</li><li>代码结构：<ol><li>xxx.wxml布局文件，小程序特定的基础组件，如view，button, text</li><li>xxx.js逻辑文件，类似于Vue对象的Page对象与App对象</li><li>xxx.wxss样式文件，与css一致，但支持样式属性列表不一样</li></ol></li><li>类MVVM的响应式框架：V(wxml)，ViewModel(Page.data，Page.func)<ol><li>Page.data与wxml对应，通过setData()修改data数据，并自动更新View</li></ol></li></ol><h1 id="Vue的实现原理"><a href="#Vue的实现原理" class="headerlink" title="Vue的实现原理"></a>Vue的实现原理</h1><p>Vue运行期间，分为三个阶段：</p><ol><li>初始化，生成Vue对象，让其具备如下属性与方法，如下所示：<br> <img src="/2018/06/07/MPVue源码分析/Vue对象.png" alt=""></li><li>vm.$mount()后，建立整个响应式框架，并首次渲染Dom</li><li>事件响应，即用户交互</li></ol><p>整个响应式框架如下图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/07/MPVue源码分析/Vue框架.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h1 id="MPVue的实现"><a href="#MPVue的实现" class="headerlink" title="MPVue的实现"></a>MPVue的实现</h1><p>通过上面的小程序框架与Vue的实现原理介绍，基于Vue写的代码，要在小程序上运行，需要做如下工作：</p><ol><li>编译期间生成小程序目录结构与代码结构<ol><li>生成app相关的三个文件：app.js, app.json, app.wxss</li><li>生成Page相关的三个文件：xxx.js, xxx.wxml, xxx.wxss<ol><li>xxx.js的转换成本最低，基本不用变化，因为都是基于javascript语言写的</li><li>xxx.wxml：把Vue的template转换为小程序的基础组件，同时对组件的属性进行映射处理，成本较高</li><li>xxx.wxss：把Vue里的样式，直接转换过来就行，成本较低</li></ol></li></ol></li><li>对Vue运行时做修改，如下图所示：<br> <img src="/2018/06/07/MPVue源码分析/mpvue框架.png" alt=""></li></ol><p>部分核心代码：</p><ol><li>初始化流程：<br> <img src="/2018/06/07/MPVue源码分析/mpvue初始化流程.png" alt=""></li><li>更新流程：<br> <img src="/2018/06/07/MPVue源码分析/mpvue更新流程.png" alt=""></li></ol><h1 id="MPVue源码介绍"><a href="#MPVue源码介绍" class="headerlink" title="MPVue源码介绍"></a>MPVue源码介绍</h1><p>直接对着代码来分享</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/MINA.html" target="_blank" rel="noopener">小程序框架</a></li><li><a href="https://github.com/numbbbbb/read-vue-source-code" target="_blank" rel="noopener">read-vue-source-code</a></li><li><a href="https://cn.vuejs.org/v2/guide/index.html" target="_blank" rel="noopener">Vue.js</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h1&gt;&lt;p&gt;使用Vue实现一个消息逆转的demo：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="前端" scheme="https://handsomeliuyang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>react-native-wechatmini</title>
    <link href="https://handsomeliuyang.github.io/2018/04/02/react-native-wechatmini/"/>
    <id>https://handsomeliuyang.github.io/2018/04/02/react-native-wechatmini/</id>
    <published>2018-04-02T11:17:05.000Z</published>
    <updated>2018-04-19T06:01:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>// 实现思路</p><p>React包括两层编程模型：数据模型、UI界面。</p><p>React的核心点：</p><ol><li>VirsualDom</li><li>组件化</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/maichong/labrador" target="_blank" rel="noopener">微信小程序模块化</a></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;// 实现思路&lt;/p&gt;
&lt;p&gt;React包括两层编程模型：数据模型、UI界面。&lt;/p&gt;
&lt;p&gt;React的核心点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;VirsualDom&lt;/li&gt;
&lt;li&gt;组件化&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class
      
    
    </summary>
    
      <category term="前端" scheme="https://handsomeliuyang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Gatsby搭建博客之旅</title>
    <link href="https://handsomeliuyang.github.io/2018/03/19/Gatsby%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/"/>
    <id>https://handsomeliuyang.github.io/2018/03/19/Gatsby搭建博客之旅/</id>
    <published>2018-03-19T09:25:39.000Z</published>
    <updated>2018-03-26T12:41:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gatsby简介"><a href="#Gatsby简介" class="headerlink" title="Gatsby简介"></a>Gatsby简介</h2><blockquote><p>Blazing-fast static site generator for React （React的快速静态网站生成器）</p></blockquote><p><strong>几大特点：</strong></p><blockquote><p>1.Modern web tech without the headache（不再为web技术落后而头痛）</p><blockquote><p>Enjoy the power of the latest web technologies – React.js , Webpack , modern JavaScript and CSS and more — all setup and waiting for you to start building. (受最新Web前端技术的强大功能–React.js，Webpack，现代JavaScript和CSS等等，所有这一切都将启动并等待您的开始。)</p></blockquote><p>2.Bring your own data (使用你自定义的数据)</p><blockquote><p>Gatsby’s rich data plugin ecosystem lets you build sites with the data you want — from one or many sources: Pull data from headless CMSs, SaaS services, APIs, databases, your file system &amp; more directly into your pages using GraphQL .(Gatsby丰富的数据插件生态系统允许您使用您想要的数据构建网站 - 来自一个或多个来源：使用GraphQL将数据从无头CMS，SaaS服务，API，数据库，文件系统等更直接地导入您的页面)</p></blockquote><p>3.Scale to the entire internet (轻松发布到互联网)</p><blockquote><p>Gatsby.js is Internet Scale. Forget complicated deploys with databases and servers and their expensive, time-consuming setup costs, maintenance, and scaling fears. Gatsby.js builds your site as “static” files which can be deployed easily on dozens of services.（Gatsby.js是互联网化的。 你可以不用理会数据库和服务器的复杂部署，以及昂贵，耗时的设置成本，维护和缩放恐惧。 Gatsby.js将您的网站构建为“静态”文件，可以轻松部署在数十种服务上）</p></blockquote><p>4.Future-proof your website (使您的网站面向未来)</p><blockquote><p>Don’t build a website with last decade’s tech. The future of the web is mobile, JavaScript and APIs—the JAMstack. Every website is a web app and every web app is a website. Gatsby.js is the universal JavaScript framework you’ve been waiting for.(不要用过去十年的技术建立一个网站。 网络的未来是移动的，JavaScript和API - JAMstack。 每个网站是一个Web应用程序，每个Web应用程序是一个网站。 Gatsby.js是你一直在等待的通用JavaScript框架。)</p></blockquote><p>5.Static Progressive Web Apps (静态PWA)</p><blockquote><p>Gatsby.js is a static PWA (Progressive Web App) generator. You get code and data splitting out-of-the-box. Gatsby loads only the critical HTML, CSS, data, and JavaScript so your site loads as fast as possible. Once loaded, Gatsby prefetches resources for other pages so clicking around the site feels incredibly fast.(Gatsby.js是一个静态PWA（Progressive Web App）生成器。 您可以将代码和数据分开。 Gatsby只加载关键的HTML，CSS，数据和JavaScript，以便您的网站加载尽可能快。 一旦加载，Gatsby预取其他网页的资源，所以点击网站感觉非常快。)</p></blockquote><p>6.Speed past the competition (超越竞争)</p><blockquote><p>Gatsby.js builds the fastest possible website. Instead of waiting to generate pages when requested, pre-build pages and lift them into a global cloud of servers — ready to be delivered instantly to your users wherever they are.(Gatsby.js建立最快的网站。 不需要等待请求时生成页面，而是预先生成页面，并将其提升到全球服务器云端 - 随时随地传送给用户，无论他们身在何处。)</p></blockquote></blockquote><p><strong>工作原理：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/gatsby流程.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="HelloWord"><a href="#HelloWord" class="headerlink" title="HelloWord"></a>HelloWord</h2><p>按官网教程很容易创建一个简单的HelloWord。<a href="https://www.gatsbyjs.org/docs/" target="_blank" rel="noopener">详见</a></p><p>常用命令：</p><ol><li>gatsby new xxx // 创建一个新的项目</li><li>gatsby develop // 构建开发站点</li><li>gatsby serve // 测试发布构建</li><li>gatsby build // 发布构建</li></ol><p><strong>效果如下：</strong><br><img src="/2018/03/19/Gatsby搭建博客之旅/gatsby-init.gif" alt=""></p><h2 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h2><p>React，Webpack，ES6这三种技术就不重点介绍了</p><h3 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h3><blockquote><p>Sass 是对 CSS 的扩展，让 CSS 语言更强大、优雅。 它允许你使用变量、嵌套规则、 mixins、导入等众多功能， 并且完全兼容 CSS 语法。 Sass 有助于保持大型样式表结构良好， 同时也让你能够快速开始小型项目， 特别是在搭配 Compass 样式库一同使用时。</p></blockquote><p><a href="http://sass.bootcss.com/docs/sass-reference/" target="_blank" rel="noopener">更多请参考</a></p><h3 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h3><blockquote><p>GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.(GraphQL是在API能提供的数据范围内，提供查询能力的语言。GraphQL在您的API中提供了对数据的完整和可理解的描述，使客户能够准确地询问他们需要什么，并且更容易随时间发展API，并支持强大的开发人员工具。)</p></blockquote><p><a href="https://graphql.org/" target="_blank" rel="noopener">更多请参考</a></p><p><strong>Rest请求过程：</strong><br><img src="/2018/03/19/Gatsby搭建博客之旅/Rest请求.png" alt=""></p><p><strong>GraphQL请求过程：</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/GraphQL请求.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>GraphQL的特点：</p><ol><li><font color="#ff0000">入口统一，合并请求</font>：不管请求什么资源，url都是一样的。这精简了不同场景下形态各异的API数量。</li><li><font color="#ff0000">自定义返回值</font>：在REST中，资源的返回结构与返回数量是由服务端决定；在GraphQL，服务端只负责定义哪些资源是可用的，由客户端自己决定需要得到什么资源，避免让API消费者取到对它来说并没有用的冗余数据。</li><li><font color="#ff0000">数据的关联性</font>：在query里，通过id，可以把多个数据源或Api直接关联起来</li><li><font color="#ff0000">方便的接口调试工具</font>：GraphiQL工具，文档与调试统一，<a href="https://github.com/graphql/graphiql" target="_blank" rel="noopener">GraphiQL</a> / <a href="http://graphql.org/swapi-graphql/" target="_blank" rel="noopener">live demo</a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/graphiql.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ol><p>注意：GraphQL是一种标准，但其具体的实现里，有些标准的特性并没有被实现。如下所描述的一样：</p><blockquote><p>从官方的定义来说，GraphQL 是一种针对 API 的查询语言；在我看来，GraphQL 是一种标准，而与标准相对的便是实现。就像 EcmaScript 与 JavaScript 的关系，从一开始你就需要有这样一种认知：GraphQL 只定义了这种查询语言语法如何、具体的语句如何执行等。但是，你在真正使用某种 GraphQL 的服务端实现时，是有可能发现 GraphQL 标准中所描述的特性尚未被实现；或者这种 GraphQL 的实现扩展了 GraphQL 标准所定义的内容。</p><p>举例来说，就像 ES 2017 标准正式纳入了 async/await，而从实现的角度上说，IE 没有实现这一标准，而 Edge 16 和 Chrome 62 则实现了这一标准（数据来源于 caniuse）说回 GraphQL 标准，与之相对的有相当多的服务器端实现。他们的大多遵循 GraphQL 标准来实现，但也可能稍有差别，这一切需要你自己去探索。</p></blockquote><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><blockquote><p>Progressive Web App, 简称 PWA，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。</p><p>PWA 能做到原生应用的体验不是靠特指某一项技术，而是经过应用一些新技术进行改进，在安全、性能和体验三个方面都有很大提升，PWA 本质上是 Web App，借助一些新技术也具备了 Native App 的一些特性，兼具 Web App 和 Native App 的优点。</p></blockquote><p><a href="https://lavas.baidu.com/pwa" target="_blank" rel="noopener">更多请参考</a></p><h2 id="Gatsby搭建博客"><a href="#Gatsby搭建博客" class="headerlink" title="Gatsby搭建博客"></a>Gatsby搭建博客</h2><p>注意：node需要安装6.x版本，Markdown插件gatsby-transformer-remark，在node 8.x与9.x会运行失败 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node下载</a></p><p>一个博客主要包括下面几部分：</p><ol><li>主页，包括作者介绍，文章列表</li><li>Post页面(文章正文页)</li><li>归档页，Categories页，Tags页，关于页</li></ol><h3 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/gatsby工程目录.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h3><ol><li><a href="https://github.com/peterramsing/lost" target="_blank" rel="noopener">lost</a>：Lost Grid是一个强大的网格系统，可以方便实现表格拆分</li><li><a href="https://github.com/moment/moment" target="_blank" rel="noopener">moment</a>：解析，验证，操作和显示日期</li><li><a href="https://github.com/ReactTraining/react-media" target="_blank" rel="noopener">react-media</a>：适配不同屏幕</li></ol><h3 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/主页.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h4><p>在我们这个demo里，首页与Post没有相同的部分，如footer，header，所以Layout里，非常的简单：<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> Helmet <span class="keyword">from</span> <span class="string">'react-helmet'</span></div><div class="line"><span class="keyword">import</span> <span class="string">"./style.scss"</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Layout</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">const</span> &#123;children&#125; = <span class="keyword">this</span>.props;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className="layout"&gt;</div><div class="line">                &lt;Helmet defaultTitle="Blog by LiuYang"/&gt;</div><div class="line">                &#123;children()&#125;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default Layout;</div></pre></td></tr></table></figure></p><p>如果有共同的footer与header，则应该在layout里实现</p><h4 id="首页整体布局"><a href="#首页整体布局" class="headerlink" title="首页整体布局"></a>首页整体布局</h4><p>包括左边Sidebar和右边的文章列表，按组件思维考虑，我们应该创建三个组件或者二个组件：<br><img src="/2018/03/19/Gatsby搭建博客之旅/首页组件.png" alt=""></p><p>下面是创建二个组件的首页布局代码：<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexRoute</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">const</span> &#123;title, subtitle&#125; = <span class="keyword">this</span>.props.data.site.siteMetadata;</div><div class="line">        <span class="keyword">const</span> &#123;<span class="attr">edges</span>:posts&#125; = <span class="keyword">this</span>.props.data.allMarkdownRemark;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;Helmet&gt;</div><div class="line">                    &lt;title&gt;&#123;title&#125;&lt;/title&gt;</div><div class="line">                    &lt;meta name="description" content=&#123;subtitle&#125;/&gt;</div><div class="line">                &lt;/Helmet&gt;</div><div class="line">                &lt;Sidebar &#123;...this.props&#125;/&gt;</div><div class="line">                &lt;div className="content"&gt;</div><div class="line">                    &lt;div className="content__inner"&gt;</div><div class="line">                        &#123;</div><div class="line">                            posts</div><div class="line">                                .filter((&#123;node:post&#125;) =&gt; post.frontmatter.title.length &gt; 0)</div><div class="line">                                .map((&#123;node:post&#125;)=&gt;&#123;</div><div class="line">                                    return (</div><div class="line">                                        &lt;Post data=&#123;post&#125; key=&#123;post.fields.slug&#125;/&gt;</div><div class="line">                                    );</div><div class="line">                                &#125;)</div><div class="line">                        &#125;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="适应不同尺寸的屏幕"><a href="#适应不同尺寸的屏幕" class="headerlink" title="适应不同尺寸的屏幕"></a>适应不同尺寸的屏幕</h4><p>常见屏幕大小有：</p><ol><li>lg：宽度大于1100px的屏幕</li><li>md：宽度在[960px–1100px]之间的屏幕</li><li>sm：宽度在[685px–960px]之间的屏幕</li><li>xs：宽度在[0px–685px]之间的屏幕</li></ol><p>在不同屏幕下，首页布局也要有相应的变化，利用css的@media实现不同屏幕的适配：<a href="https://www.w3schools.com/cssref/css3_pr_mediaquery.asp" target="_blank" rel="noopener">CSS @media Rule</a><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// _breakpoints.scss</span></div><div class="line">@mixin breakpoint-sm &#123;</div><div class="line">    @media screen and (min-width: <span class="number">685</span>) &#123;</div><div class="line">        @content</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@mixin breakpoint-md &#123;</div><div class="line">    @media screen and (min-width: <span class="number">960</span>) &#123;</div><div class="line">        @content</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// index.js的scss</span></div><div class="line">.content &#123;</div><div class="line">    &amp;__inner &#123;</div><div class="line">        <span class="attr">padding</span>:<span class="number">25</span>px <span class="number">20</span>px;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@include breakpoint-sm &#123;</div><div class="line">    .content &#123;</div><div class="line">        lost-column: <span class="number">7</span>/<span class="number">12</span>;</div><div class="line">        &amp;__inner &#123;</div><div class="line">            <span class="attr">padding</span>: <span class="number">30</span>px <span class="number">20</span>px;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@include breakpoint-md &#123;</div><div class="line">    .content &#123;</div><div class="line">        lost-column: <span class="number">2</span>/<span class="number">3</span>;</div><div class="line">        &amp;__inner &#123;</div><div class="line">            <span class="attr">padding</span>: <span class="number">40</span>px <span class="number">35</span>px;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意上面的样式是叠加的，下面的会覆写掉面上样式。</p><h4 id="空格实现"><a href="#空格实现" class="headerlink" title="空格实现"></a>空格实现</h4><p>在html页面里，想实现空隔效果，可以有下面几种方案：</p><ol><li>通过空格的特殊字符实现</li><li>全角下的空格</li><li>通过css样式实现，占位div，再设置其margin值</li></ol><h4 id="博客相关的gatsby插件"><a href="#博客相关的gatsby插件" class="headerlink" title="博客相关的gatsby插件"></a>博客相关的gatsby插件</h4><ol><li><a href="https://www.gatsbyjs.org/packages/gatsby-source-filesystem/?=gatsby-source-filesystem" target="_blank" rel="noopener">gatsby-source-filesystem</a>：读取本地文件</li><li><a href="https://www.gatsbyjs.org/packages/gatsby-transformer-remark/?=gatsby-transformer-remark" target="_blank" rel="noopener">gatsby-transformer-remark</a>：使用Remark解析Markdown文件</li><li><a href="https://www.gatsbyjs.org/packages/gatsby-remark-images/?=gatsby-remark-images" target="_blank" rel="noopener">gatsby-remark-images</a>：用于解析图片</li><li><a href="https://www.gatsbyjs.org/packages/gatsby-plugin-postcss-sass/#gatsby-plugin-postcss-sass" target="_blank" rel="noopener">gatsby-plugin-postcss-sass</a>：支持sass</li></ol><p>默认通过GraphQL无法查询到文件相关的数据，当安装了gatsby-source-filesystem插件后，可以查询到File相关的数据：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/graphql_file.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>安装了gatsby-transformer-remark插件后，就可以查询Markdown相关的数据了：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/graphql_markdown.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>markdown的node结点的parent是file结点，即markdown是基于上一次插件的结果产生的，减少重复制造轮子</p><h3 id="Post页面"><a href="#Post页面" class="headerlink" title="Post页面"></a>Post页面</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/Post页面.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>页面的思路与主页的思路一样，使用组件化的思路设计，唯一的不同点是代码高亮显示</p><p>主页是一个固定页，但Post页面有很多，如果批量生成？使用gatsby的扩展点及Api来实现，整体流程如下所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/19/Gatsby搭建博客之旅/gatsby模板.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">exports.createPages = <span class="function">(<span class="params">&#123;graphql, boundActionCreators&#125;</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">const</span> &#123;createPage&#125; = boundActionCreators;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</div><div class="line">        <span class="keyword">const</span> postTemplate = path.resolve(<span class="string">'./src/templates/post-template.js'</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 查询所有的markdown，并创建相应的页面</span></div><div class="line">        resolve(</div><div class="line">            graphql(<span class="string">`&#123;</span></div><div class="line">                allMarkdownRemark(</div><div class="line">                    limit: 1000</div><div class="line">                ) &#123;</div><div class="line">                    edges &#123;</div><div class="line">                        node &#123;</div><div class="line">                            fields &#123;</div><div class="line">                                slug</div><div class="line">                            &#125;</div><div class="line">                            frontmatter &#123;</div><div class="line">                                category</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;`).then(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</div><div class="line">                <span class="keyword">if</span> (result.errors) &#123;</div><div class="line">                    <span class="built_in">console</span>.log(result.errors);</div><div class="line">                    reject(result.errors)</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// 创建对应的markdown页面</span></div><div class="line">                result.data.allMarkdownRemark.edges.forEach(<span class="function">(<span class="params">edge</span>) =&gt;</span> &#123;</div><div class="line">                    createPage(&#123;</div><div class="line">                        <span class="attr">path</span>: edge.node.fields.slug, <span class="comment">// required</span></div><div class="line">                        component: slash(postTemplate),</div><div class="line">                        <span class="attr">context</span>: &#123;</div><div class="line">                            <span class="attr">slug</span>: edge.node.fields.slug,</div><div class="line">                        &#125;,</div><div class="line">                    &#125;);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">                resolve();</div><div class="line">            &#125;)</div><div class="line">        )</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="Gatsby与Hexo的对比"><a href="#Gatsby与Hexo的对比" class="headerlink" title="Gatsby与Hexo的对比"></a>Gatsby与Hexo的对比</h2><p>调研Gatsby的初衷是想把博客实现由Hexo替换为Gatsby，Hexo与Gatsby都是静态网站生成器，主要差别是使用的技术不一样，Gatsby使用的都是最新技术，但最后还是继续使用了Hexo，主要原因是：Hexo提供了很多的Themes，能快速复用这些Themes。</p><p>此Demo的地址：<a href="https://github.com/handsomeliuyang/handsomeliuyang.github.io/tree/gatsby" target="_blank" rel="noopener">Gatsby-demo</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://www.fly63.com/article/detial/388" target="_blank" rel="noopener">中文gatsby介绍</a></li><li><a href="https://www.gatsbyjs.org/" target="_blank" rel="noopener">gatsbyjs</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">约定优于配置</a></li><li><a href="http://jerryzou.com/posts/10-questions-about-graphql/" target="_blank" rel="noopener">阻碍你使用 GraphQL 的十个问题</a></li><li><a href="https://www.howtographql.com/basics/1-graphql-is-the-better-rest/" target="_blank" rel="noopener">GraphQL is the better REST</a></li><li><a href="https://www.jianshu.com/p/2ad286397f7a" target="_blank" rel="noopener">对比GraphQL与REST——两种HTTP API的差异</a></li><li><a href="https://blog.tonyseek.com/post/graphql-vs-restful/" target="_blank" rel="noopener">GraphQL vs RESTful API 的一些想法</a></li><li><a href="https://github.com/alxshelepenok/gatsby-starter-lumen" target="_blank" rel="noopener">gatsby-starter-lumen</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Gatsby简介&quot;&gt;&lt;a href=&quot;#Gatsby简介&quot; class=&quot;headerlink&quot; title=&quot;Gatsby简介&quot;&gt;&lt;/a&gt;Gatsby简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Blazing-fast static site generato
      
    
    </summary>
    
      <category term="前端" scheme="https://handsomeliuyang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>抽屉效果实现三端化（android，ios，web）的历程</title>
    <link href="https://handsomeliuyang.github.io/2018/03/04/%E6%8A%BD%E5%B1%89%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E4%B8%89%E7%AB%AF%E5%8C%96%E7%9A%84%E5%8E%86%E7%A8%8B/"/>
    <id>https://handsomeliuyang.github.io/2018/03/04/抽屉效果实现三端化的历程/</id>
    <published>2018-03-03T16:00:00.000Z</published>
    <updated>2018-03-26T12:41:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactNative运行"><a href="#ReactNative运行" class="headerlink" title="ReactNative运行"></a>ReactNative运行</h1><p>通过Native Code的运行命令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native run-android</div></pre></td></tr></table></figure><p>具体过程：</p><ol><li>启动js server: 用于生成本地打包服务Metro，地址：<a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a></li><li>编译打包，并安装：cd android &amp;&amp; ./gradlew installDebug</li><li>手机通过<a href="http://localhost:8081访问js" target="_blank" rel="noopener">http://localhost:8081访问js</a> server：adb reverse tcp:8081 tcp:8081</li><li>启动App：adb shell am start -n 包名/activity</li><li>App运行时，默认请求bundle的地址为：<a href="http://ip:8081/xxx" target="_blank" rel="noopener">http://ip:8081/xxx</a></li></ol><p>问题：当电脑切换wifi后，模拟器无法连接js server？<br>原因：电脑的ip地址变了，但App请求bundle地址没有变<br>彻底解决方案：在App里，进入Developer Menu，修改bundle请求地址为：<a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a></p><p><strong>android模拟器快捷键</strong></p><ol><li>Developer Menu： ⌘M</li><li>Reload：two R</li></ol><p>注意：使用x86的模拟器，此模拟器的运行速度与真机一致</p><h1 id="react-native-web部署"><a href="#react-native-web部署" class="headerlink" title="react-native-web部署"></a>react-native-web部署</h1><p>通过ReactNative的Metro编译出的bundle.js文件，只能在对应的App里运行，无法直接在浏览器里运行。</p><p>在不考虑自定义View和Module的情况，要想生成的bundle.js可以直接在浏览器里运行，理论上只需要两步：</p><ol><li>实现一套在浏览器里支持运行的react-native-web库</li><li>不通过Metro打包，通过webpack打包，把react-native-web库替换react-native库，同时打包在一起</li></ol><p>react-native-web已经有实现版本了，详情请查看<a href="https://github.com/necolas/react-native-web" target="_blank" rel="noopener">react-native-web</a></p><p>相应的webpack的配置过程，请参考：<a href="https://github.com/ndbroadbent/react-native-web-webpack" target="_blank" rel="noopener">react-native-web-webpack</a></p><p>配置完后，不用对ReactNative代码做任何改动，就能直接在浏览器上支持运行，主要是使用了webpack的alias功能（整体替换react-native库）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">    <span class="attr">alias</span>: &#123;</div><div class="line">        <span class="string">'react-native'</span>: <span class="string">'react-native-web'</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="三端实现：抽屉效果"><a href="#三端实现：抽屉效果" class="headerlink" title="三端实现：抽屉效果"></a>三端实现：抽屉效果</h1><h2 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h2><p><strong>方案1：</strong>仿照DrawerLayoutAndroid的Api，实现DrawerLayoutIOS和DrawerLayoutWeb两套View</p><p><strong>方案2：</strong>react-navigation库也实现了DrawerLayoutWeb，在webpack如下配置，就可以使用了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">    alias: &#123;</div><div class="line">        &apos;react-navigation&apos;: &apos;react-navigation/lib/react-navigation.js&apos;,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意：不是所有的react-navigation版本都能测试成功，1.0.0-beta.10测试通过，但beta.50测试失败<br>更详细的信息：<a href="https://medium.com/@locropulenton/navigating-in-all-platforms-with-react-navigation-673e9a6e963" target="_blank" rel="noopener">Navigating in all platforms</a></p><p><strong>方案3：</strong>使用基本组件（View，Animated，TouchableWithoutFeedback等），实现DrawerLayout，即可满足三端运行（<a href="https://github.com/react-native-community/react-native-drawer-layout" target="_blank" rel="noopener">react-native-drawer-layout</a>）</p><p>此方案有一定的适配的问题，可能在android4.x系统里，运行会有一些问题</p><h2 id="抽屉效果实现（方案3）"><a href="#抽屉效果实现（方案3）" class="headerlink" title="抽屉效果实现（方案3）"></a>抽屉效果实现（方案3）</h2><h3 id="实现弹窗效果"><a href="#实现弹窗效果" class="headerlink" title="实现弹窗效果"></a>实现弹窗效果</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/04/抽屉效果实现三端化的历程/drawer.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>实现分析：</p><ol><li>整体有三层View，最底层是首页，中间是遮罩层，最上层是抽屉</li><li>正常Flexbox布局相当于Android里的LinearLayout布局，但通过position=absolute，与zindex可实现叠加效果，更多请参考<a href="https://www.w3schools.com/cssref/pr_class_position.asp" target="_blank" rel="noopener">CSS position Property</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;View</div><div class="line">    style=&#123;&#123; flex: 1, backgroundColor: &apos;transparent&apos;&#125;&#125;&gt;</div><div class="line">    &lt;View</div><div class="line">        style=&#123;&#123;</div><div class="line">            flex: 1,</div><div class="line">            zIndex: 0,</div><div class="line">        &#125;&#125;&gt;</div><div class="line">        &#123;this.props.children&#125; // 子布局</div><div class="line">    &lt;/View&gt;</div><div class="line">    &lt;View</div><div class="line">        style=&#123;&#123;</div><div class="line">            backgroundColor: &apos;#000000&apos;,</div><div class="line">            position: &apos;absolute&apos;,</div><div class="line">            top: 0,</div><div class="line">            left: 0,</div><div class="line">            bottom: 0,</div><div class="line">            right: 0,</div><div class="line">            zIndex: 1000,</div><div class="line">        &#125;&#125;&gt;</div><div class="line">    &lt;/View&gt;</div><div class="line">    &lt;View</div><div class="line">        style=&#123;&#123;</div><div class="line">            position: &apos;absolute&apos;,</div><div class="line">            top: 0,</div><div class="line">            bottom: 0,</div><div class="line">            zIndex: 1001</div><div class="line">        &#125;&#125;&gt;</div><div class="line">        &#123;this.props.renderNavigationView()&#125; // 抽屉布局</div><div class="line">    &lt;/View&gt;</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure><h3 id="实现抽屉展开与收起动画"><a href="#实现抽屉展开与收起动画" class="headerlink" title="实现抽屉展开与收起动画"></a>实现抽屉展开与收起动画</h3><iframe height="300" width="100%" src="drawer.mp4" frameborder="0" allowfullscreen></iframe><p>两个动画：</p><ol><li>遮罩层渐隐和渐现动画</li><li>抽屉水平移动动画</li></ol><p>2维动画实现的思路比较简单，以遮罩层的渐隐动画为例：</p><ol><li><p>假设当前的透明度为变量x，例用Animated.View的opacity样式</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">..........</div><div class="line">    &lt;Animated.View</div><div class="line">        style=&#123;&#123;</div><div class="line">            backgroundColor: &apos;#000000&apos;,</div><div class="line">            position: &apos;absolute&apos;,</div><div class="line">            top: 0,</div><div class="line">            left: 0,</div><div class="line">            bottom: 0,</div><div class="line">            right: 0,</div><div class="line">            zIndex: 1000,</div><div class="line">            opacity: x  // 设置透明度</div><div class="line">        &#125;&#125;&gt;</div><div class="line">    &lt;/Animated.View&gt;</div><div class="line">   ..........</div></pre></td></tr></table></figure></li><li><p>定时修改变量x，并重新渲染，动画就行成了</p></li></ol><p><strong>真正的实现：</strong></p><ol><li><p>通过变量设置透明度与水平移动理</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">render()&#123;</div><div class="line">    const &#123;drawerWidth, drawerBackgroundColor&#125; = this.props;</div><div class="line"></div><div class="line">    const &#123;openValue, drawerShown&#125; = this.state;</div><div class="line"></div><div class="line">    const dynamicDrawerStyles = &#123;</div><div class="line">        backgroundColor: drawerBackgroundColor,</div><div class="line">        width: drawerWidth,</div><div class="line">        left: 0,</div><div class="line">    &#125;;</div><div class="line">    let drawerTranslateX = openValue.interpolate(&#123;</div><div class="line">        inputRange: [0, 1],</div><div class="line">        outputRange: [-drawerWidth, 0],</div><div class="line">    &#125;);</div><div class="line">    const animatedDrawerStyles = &#123;</div><div class="line">        transform: [&#123; translateX: drawerTranslateX&#125;],</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    const overlayOpacity = openValue.interpolate(&#123;</div><div class="line">        inputRange: [0, 1],</div><div class="line">        outputRange: [0, 0.7],</div><div class="line">    &#125;);</div><div class="line">    const animatedOverlayStyles = &#123;opacity: overlayOpacity&#125;;</div><div class="line"></div><div class="line"></div><div class="line">    const pointerEvents = drawerShown ? &quot;auto&quot; : &quot;none&quot;;</div><div class="line"></div><div class="line">    return (</div><div class="line">        &lt;View</div><div class="line">            style=&#123;&#123; flex: 1, backgroundColor: &apos;transparent&apos;&#125;&#125;&gt;</div><div class="line">            &lt;Animated.View</div><div class="line">                style=&#123;styles.main&#125;&gt;</div><div class="line">                &#123;this.props.children&#125;</div><div class="line">            &lt;/Animated.View&gt;</div><div class="line">            &lt;TouchableWithoutFeedback</div><div class="line">                pointerEvents=&#123;pointerEvents&#125;</div><div class="line">                onPress=&#123;this._onOverlayClick&#125;&gt;</div><div class="line">                &lt;Animated.View</div><div class="line">                    pointerEvents=&#123;pointerEvents&#125;</div><div class="line">                    style=&#123;[styles.overlay, animatedOverlayStyles]&#125;&gt;</div><div class="line">                &lt;/Animated.View&gt;</div><div class="line">            &lt;/TouchableWithoutFeedback&gt;</div><div class="line">            &lt;Animated.View</div><div class="line">                style=&#123;[styles.drawer, dynamicDrawerStyles, animatedDrawerStyles]&#125;&gt;</div><div class="line">                &#123;this.props.renderNavigationView()&#125;</div><div class="line">            &lt;/Animated.View&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>定时修改变量</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Animated.spring(this.state.openValue, &#123;</div><div class="line">       toValue: 1,</div><div class="line">       bounciness: 0,</div><div class="line">       // restSpeedThreshold: 0.1,</div><div class="line">       useNativeDriver: true</div><div class="line">   &#125;).start();</div></pre></td></tr></table></figure></li></ol><p>重点知识点：</p><ol><li>css3也有一个transform属性，但这个是ReactNative的transform属性，有区别，其分别对应的文档：<ol><li><a href="https://facebook.github.io/react-native/docs/0.43/transforms.html#transform" target="_blank" rel="noopener">ReactNative的transform</a></li><li><a href="http://css.cuishifeng.cn/" target="_blank" rel="noopener">css3的transform</a></li></ol></li><li>translateX属性的范围不是0–1，而实际抽屉的宽度</li><li>渐隐取值范围：[0–0.7]，水平移动画的取值范围：[0–抽屉的宽广]，变量openValue的取值范围：[0–1]。Animated.Value()的interpolate()方法进行转换，使其在同一个维度</li></ol><p><strong>特别注意：</strong>使用Animated.Value变量时，只能在Animated.View里使用，不能直接在View里使用，会出现各种想像不到的问题</p><h3 id="遮罩层的事件处理"><a href="#遮罩层的事件处理" class="headerlink" title="遮罩层的事件处理"></a>遮罩层的事件处理</h3><p>这个比较简单，通过TouchableWithoutFeedback就可以实现</p><p><strong>注意：</strong>overlay设置为全透明后，还是一样可以拦截或透传事件，通过View的pointerEvents属性配制事件传递</p><h3 id="触发抽屉显示动画"><a href="#触发抽屉显示动画" class="headerlink" title="触发抽屉显示动画"></a>触发抽屉显示动画</h3><p>下面是真正的使用DrawerLayout的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">render()&#123;</div><div class="line">    const navigationView = React.createElement(NavigationScreen); // 抽屉View</div><div class="line">    return (</div><div class="line">        &lt;DrawerLayout</div><div class="line">            drawerWidth=&#123;300&#125;</div><div class="line">            drawerBackgroundColor=&apos;#DAE8FC&apos;</div><div class="line">            renderNavigationView=&#123;()=&gt;navigationView&#125;</div><div class="line">            ref=&#123;(drawer)=&gt;&#123;this.drawerLayout = drawer;&#125;&#125;&gt;</div><div class="line">            &lt;HomeScreen navigate=&#123;this.navigate&#125;/&gt; // 首页</div><div class="line">        &lt;/DrawerLayout&gt;</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>真正触发抽屉显示动画的是HomeScreen(首页)，并不是DrawerLayout自已，所以需要使用React的ref属性，把DrawLayout的引用传递给其他View，才能调用其对外提供的Api。</p><h1 id="学习到的技术点（记住）"><a href="#学习到的技术点（记住）" class="headerlink" title="学习到的技术点（记住）"></a>学习到的技术点（记住）</h1><h2 id="端口映射-USB连接"><a href="#端口映射-USB连接" class="headerlink" title="端口映射(USB连接)"></a>端口映射(USB连接)</h2><ol><li><p>在手机设备里通过<a href="http://localhost:port/访问pc上的服务时，使用如下命令：" target="_blank" rel="noopener">http://localhost:port/访问pc上的服务时，使用如下命令：</a></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb reverse (remote) (local)</div><div class="line">例子：adb -s 设备 reverse tcp:8081 tcp:8081</div></pre></td></tr></table></figure></li><li><p>在pc上通过<a href="http://localhost:port/，访问手机设备上的服务时，使用如下命令：" target="_blank" rel="noopener">http://localhost:port/，访问手机设备上的服务时，使用如下命令：</a></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb forward (local) (remote)</div><div class="line">例子：adb forward tcp:8081 tcp:8081</div></pre></td></tr></table></figure></li></ol><h2 id="函数里的this的理解"><a href="#函数里的this的理解" class="headerlink" title="函数里的this的理解"></a>函数里的this的理解</h2><ol><li>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象。<a href="http://www.cnblogs.com/pssp/p/5216085.html" target="_blank" rel="noopener">更多信息</a></li><li>通过.bind()可以修改this的指向</li><li>箭头函数的this，是由定义时的上下文决定，而不是由运行时决定。</li></ol><p>在ES6里，定义类时，其函数的写法有下面两种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Person &#123;</div><div class="line">constructor()&#123;</div><div class="line">this.name = &quot;Li&quot;;</div><div class="line">this.age = &quot;18&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">getName()&#123;</div><div class="line">console.log(&quot;Person.name=&quot; + this.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">getAge = ()=&gt;&#123;</div><div class="line">console.log(&quot;Person.age=&quot; + this.age);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>getName()方法，在下面的场景下会执行有问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const person = new Person(xxx);</div><div class="line">const tempGetName = person.getName;</div><div class="line">tempGetName(); // this为window</div></pre></td></tr></table></figure><p>要解决这个问题，需要在构造函数里添加：this.getName = this.getName.bind(this)</p><p>getName()与getAge()方法的其他不同点：</p><ol><li><p>getName()定义在原型上，getAge()定义在对象上，当类的对象很多时，比较占内存</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// getAge()方法相当于在构造函数里创建</div><div class="line">constructor(props)&#123;</div><div class="line">super(props);</div><div class="line"></div><div class="line">this.name = &quot;Li&quot;;</div><div class="line">this.age = &quot;18&quot;;</div><div class="line">this.getAge = ()=&gt;&#123;</div><div class="line">console.log(&quot;Person.age=&quot; + this.age);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// getName()相当于在原型上定义</div><div class="line">Person.prototype.getName = function()&#123;</div><div class="line">console.log(&quot;Person.age=&quot; + this.age);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>箭头函数的继承的三种情况：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">// 继承1</div><div class="line">class Student extends Person&#123;</div><div class="line">getAge = ()=&gt;&#123;</div><div class="line">super.getAge();</div><div class="line">console.log(&quot;Student.age&quot;);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">new Student().getAge();</div><div class="line">// Uncaught TypeError: (intermediate value).getAge is not a function</div><div class="line"></div><div class="line">// 继承2</div><div class="line">class Student extends Person&#123;</div><div class="line">getAge()&#123;</div><div class="line">super.getAge();</div><div class="line">console.log(&quot;Student.age&quot;);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">new Student().getAge();</div><div class="line">// Person.age=18</div><div class="line"></div><div class="line">// 继承3</div><div class="line">class Student extends Person&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">new Student().getAge();</div><div class="line">// Person.age=18</div><div class="line"></div><div class="line">// 继承4</div><div class="line">class Student extends Person&#123;</div><div class="line">getName()&#123;</div><div class="line">   super.getName();</div><div class="line">  console.log(&quot;Student.name&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">new Student().getName();</div><div class="line">// Person.name=Li</div><div class="line">// Student.name</div><div class="line"></div><div class="line">// 继承5</div><div class="line">class Student extends Person&#123;</div><div class="line">getName=()=&gt;&#123;</div><div class="line">   super.getName();</div><div class="line">  console.log(&quot;Student.name&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">new Student().getName();</div><div class="line">// Person.name=Li</div><div class="line">// Student.name</div></pre></td></tr></table></figure><p> 结论就是：<font color="#ff0000">箭头函数可以继承，但无法被重写</font></p></li></ol><h2 id="flexbox布局理解"><a href="#flexbox布局理解" class="headerlink" title="flexbox布局理解"></a>flexbox布局理解</h2><ol><li>Flex布局类似于Android里的LinearLayout布局，flexDirection，justifyContent，alignItems，alignSelf</li><li>width，height的值尖似于dip，会依据手机的屏幕进行转换，<a href="https://facebook.github.io/react-native/docs/pixelratio.html" target="_blank" rel="noopener">PixelRatio更多信息</a></li><li>Flex的布局，默认是一层布局，通过position=absolute，与zindex可实现Android里的RelativeLayout效果。<a href="https://www.w3schools.com/cssref/pr_class_position.asp" target="_blank" rel="noopener">CSS position Property</a></li></ol><h2 id="webpack的resolve-alias"><a href="#webpack的resolve-alias" class="headerlink" title="webpack的resolve.alias"></a>webpack的resolve.alias</h2><p>可以给import或require设置别名，利用此特性，可以把引入库修改掉，但同时又不用修改源码，<a href="https://doc.webpack-china.org/configuration/resolve/" target="_blank" rel="noopener">更多信息</a></p><h2 id="React的组件之间的交互方式"><a href="#React的组件之间的交互方式" class="headerlink" title="React的组件之间的交互方式"></a>React的组件之间的交互方式</h2><p>默认情况下，props是父组件与子组件交互的唯一方式，父组件要修改子组件，通过新的props去重新渲染子组件。这种方案可以起到很好的解耦，但在少数情况下，无法满足需求，如抽屉的展开与收起动画。</p><p>这种情况下，可以使用Refs，比较适合使用refs的场景：</p><ol><li>处理focus、文本选择或者媒体播放</li><li>触发强制动画</li><li>集成第三方DOM库</li></ol><p><a href="http://www.css88.com/react/docs/refs-and-the-dom.html" target="_blank" rel="noopener">更多请参考</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://babeljs.io/repl/" target="_blank" rel="noopener">BABEL在线转换工具</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ReactNative运行&quot;&gt;&lt;a href=&quot;#ReactNative运行&quot; class=&quot;headerlink&quot; title=&quot;ReactNative运行&quot;&gt;&lt;/a&gt;ReactNative运行&lt;/h1&gt;&lt;p&gt;通过Native Code的运行命令是：&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="前端" scheme="https://handsomeliuyang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ReactNative" scheme="https://handsomeliuyang.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>微信聊天数据定时清理</title>
    <link href="https://handsomeliuyang.github.io/2017/12/12/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E6%95%B0%E6%8D%AE%E5%AE%9A%E6%97%B6%E6%B8%85%E7%90%86/"/>
    <id>https://handsomeliuyang.github.io/2017/12/12/微信聊天数据定时清理/</id>
    <published>2017-12-12T02:42:49.000Z</published>
    <updated>2017-12-14T06:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术方案选择"><a href="#技术方案选择" class="headerlink" title="技术方案选择"></a>技术方案选择</h1><p>Android测试支持库有：</p><ol><li>Junit3, Junit4：用于方法级别的单元测试，不通过手机运行，在测试一些正则表达式时，非常方便<br> <img src="/2017/12/12/微信聊天数据定时清理/1.png" alt=""></li><li>AndroidJUnitRunner：在手机上运行Junit测试，如一些需要获取Context的方法</li><li>Espresso：UI 测试框架；适合应用中的功能性 UI 测试。</li><li>UI Automator：UI 测试框架；适合跨系统和已安装应用的跨应用功能性 UI 测试</li><li>无障碍Api：可用于模拟用户点击，适合跨系统和已安装应用的跨应用功能性UI测试</li></ol><p>选择结果：无障碍Api，因为UI Automator只能通过adb shell运行。</p><p>注意：Root后的手机，应该可以在App内直接执行UI Automator — 没有经过测试</p><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><h2 id="定时机制"><a href="#定时机制" class="headerlink" title="定时机制"></a>定时机制</h2><p>定时机制很容易，使用AlarmManager就行，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//点击，设置重复闹钟。</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRepeatingAlarm</span><span class="params">()</span></span>&#123;</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ClearWeixinActivity.class);</div><div class="line">    intent.putExtra(<span class="string">"msg"</span>, <span class="string">"重复的事情多次提醒！！！"</span>);</div><div class="line">    intent.putExtra(<span class="string">"type"</span>, <span class="string">"repeat"</span>);</div><div class="line">    PendingIntent pendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">101</span>, intent, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">//假设当前时间15s之后，就开始第一次触发；然后每隔20s再次触发。</span></div><div class="line">    Calendar c = Calendar.getInstance();</div><div class="line">    c.set(Calendar.SECOND,  c.get(Calendar.SECOND) + <span class="number">60</span>*<span class="number">60</span>*<span class="number">1</span>);</div><div class="line"></div><div class="line">    AlarmManager alarmManager = (AlarmManager)getSystemService(ALARM_SERVICE);</div><div class="line">    alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,</div><div class="line">            c.getTimeInMillis(),</div><div class="line">            <span class="number">1</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>, <span class="comment">// 1个小时</span></div><div class="line">            pendingIntent);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><font color="#ff0000">注意：</font> 当进程被杀后，闹钟无法调起应用，需要开启自启动服务</p><h2 id="自动开启无障碍模式"><a href="#自动开启无障碍模式" class="headerlink" title="自动开启无障碍模式"></a>自动开启无障碍模式</h2><p>由于无障碍模式的开启后，当应用程序进程被杀后，无障碍模式会被关掉，所以需要自动打开无障碍模式。</p><p>通过命令打开障碍模式的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 打开无障碍模式</div><div class="line">adb shell settings put secure enabled_accessibility_services com.ly.robottool/com.ly.robottool.weixin.ClearWeixinService</div><div class="line">adb shell settings put secure accessibility_enabled 1</div><div class="line"></div><div class="line">// 查看无障碍的配置情况</div><div class="line">adb shell content query --uri content://settings/secure</div></pre></td></tr></table></figure><p>App里，通过获取Root权限后，可执行以上命令，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Process p = Runtime.getRuntime().exec(<span class="string">"su"</span>);</div><div class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(p.getOutputStream());</div><div class="line">    dos.writeBytes(<span class="string">"settings put secure enabled_accessibility_services com.ly.robottool/com.ly.robottool.weixin.ClearWeixinService\n"</span>);</div><div class="line">    dos.writeBytes(<span class="string">"settings put secure accessibility_enabled 1\n"</span>);</div><div class="line">    dos.writeBytes(<span class="string">"mkdir /sdcard/333\n"</span>);</div><div class="line">    dos.writeBytes(<span class="string">"exit\n"</span>);</div><div class="line">    dos.flush();</div><div class="line">    dos.close();</div><div class="line">    p.waitFor();</div><div class="line"></div><div class="line">    mHander.sendEmptyMessageDelayed(MESSAGE_ACCESSIBILITY_SUCCESS, <span class="number">1000</span>*<span class="number">1</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><font color="#ff0000">注意：</font> 上面的代码，需要在子线程里执行</p><h2 id="无障碍服务"><a href="#无障碍服务" class="headerlink" title="无障碍服务"></a>无障碍服务</h2><h3 id="无障碍的整体机制"><a href="#无障碍的整体机制" class="headerlink" title="无障碍的整体机制"></a>无障碍的整体机制</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/12/12/微信聊天数据定时清理/无障碍服务框架.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="无障碍Api"><a href="#无障碍Api" class="headerlink" title="无障碍Api"></a>无障碍Api</h3><p>更加详细的文档，请查看<a href="http://informationaccessibilityassociation.github.io/androidAccessibility/services.htm#act-for-users" target="_blank" rel="noopener">Android开发无障碍指南</a></p><p>总结一些关键点：</p><ol><li>默认情况下，只能看到TextView及其ParentView，基他ImageView等等都看不到，但通过设置flags |= FLAG_INCLUDE_NOT_IMPORTANT_VIEWS后，可以看到其他没有包含TextView的View</li><li>只能看到标准View，即自定View的父类，无法看到自定View的类名</li><li>只能获取View的Parent，children，Text，ClassName，屏幕坐标，大小，viewId，一些状态（checkable，checked，focusable，focused，selected，clickable，longClickable）</li></ol><p>注意：微信由于使用了资源id混淆技术，不同版本的微信apk，其viewid会变化</p><h3 id="UIAutomatorViewer查看ID"><a href="#UIAutomatorViewer查看ID" class="headerlink" title="UIAutomatorViewer查看ID"></a>UIAutomatorViewer查看ID</h3><p>uiautomatorviewer工具所在目录：Android SDK/tools/bin/uiautomatorviewer</p><p>与dumpsys比较：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/12/12/微信聊天数据定时清理/uiautomatorviewer.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/12/12/微信聊天数据定时清理/dumpsys.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>结论：uiautomator，uiautomatorviewer，无障碍Api都只能看到TextView及其ParentView，但dumpsys可以看到全部View</p><h2 id="微信自动清理聊天记录"><a href="#微信自动清理聊天记录" class="headerlink" title="微信自动清理聊天记录"></a>微信自动清理聊天记录</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/12/12/微信聊天数据定时清理/清理流程.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAccessibilityEvent</span><span class="params">(AccessibilityEvent event)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!WECHAT_PACKAGENAME.equals(event.getPackageName())) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String beginUUID = SharedPreferenceUtils.getBeginUUID(<span class="keyword">this</span>);</div><div class="line">    String endUUID = SharedPreferenceUtils.getEndUUID(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">if</span>(beginUUID == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!beginUUID.equals(endUUID)) &#123;</div><div class="line">        SharedPreferenceUtils.updateEndUUID(<span class="keyword">this</span>, beginUUID);</div><div class="line">        hasClickMe = <span class="keyword">false</span>;</div><div class="line">        hasClickSetting = <span class="keyword">false</span>;</div><div class="line">        hasClickChat = <span class="keyword">false</span>;</div><div class="line">        hasEnterClearDialog = <span class="keyword">false</span>;</div><div class="line">        hasClickClear = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    log(<span class="string">"0000:"</span> + event);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!hasClickMe) &#123;</div><div class="line">        enterPerson(event);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!hasClickSetting)&#123;</div><div class="line">        enterSetting(event);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!hasClickChat)&#123;</div><div class="line">        enterChat(event);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!hasEnterClearDialog)&#123;</div><div class="line">        enterClearDialog(event);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!hasClickClear)&#123;</div><div class="line">        clickClear(event);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enterPerson</span><span class="params">(AccessibilityEvent event)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="string">"com.tencent.mm.ui.LauncherUI"</span>.equals(event.getClassName()))&#123;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED == event.getEventType())&#123;</div><div class="line">        <span class="comment">// 查找当前窗口中包含“安装”文字的按钮</span></div><div class="line">        List&lt;AccessibilityNodeInfo&gt; nodes = getRootInActiveWindow().findAccessibilityNodeInfosByViewId(<span class="string">"com.tencent.mm:id/c3f"</span>);</div><div class="line">        AccessibilityNodeInfo myNode = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span>(AccessibilityNodeInfo node : nodes)&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="string">"我"</span>.equals(node.getText())) &#123;</div><div class="line">                myNode = node;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(myNode == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        myNode.getParent().performAction(AccessibilityNodeInfo.ACTION_CLICK);</div><div class="line">        hasClickMe = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://informationaccessibilityassociation.github.io/androidAccessibility/services.htm#act-for-users" target="_blank" rel="noopener">Android开发无障碍指南</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;技术方案选择&quot;&gt;&lt;a href=&quot;#技术方案选择&quot; class=&quot;headerlink&quot; title=&quot;技术方案选择&quot;&gt;&lt;/a&gt;技术方案选择&lt;/h1&gt;&lt;p&gt;Android测试支持库有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Junit3, Junit4：用于方法级别的单元测试
      
    
    </summary>
    
      <category term="Android" scheme="https://handsomeliuyang.github.io/categories/Android/"/>
    
    
      <category term="自动化测试" scheme="https://handsomeliuyang.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>异或总结</title>
    <link href="https://handsomeliuyang.github.io/2017/08/18/%E5%BC%82%E6%88%96%E6%80%BB%E7%BB%93/"/>
    <id>https://handsomeliuyang.github.io/2017/08/18/异或总结/</id>
    <published>2017-08-18T07:28:51.000Z</published>
    <updated>2017-09-19T09:48:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异或（exclusive-or）的定义"><a href="#异或（exclusive-or）的定义" class="headerlink" title="异或（exclusive or）的定义"></a>异或（exclusive or）的定义</h1><p>符号：</p><blockquote><p>XOR 或 EOR 或 ⊕（编程语言中常用^）</p></blockquote><p>定义：逻辑运算里，仅当两个运算元中恰有一个的值为真，而另外一个的值为非真时，其值为真</p><blockquote><p>1 ⊕ 1 = 0<br>0 ⊕ 0 = 0<br>1 ⊕ 0 = 1<br>0 ⊕ 1 = 1</p></blockquote><h1 id="异或的特性"><a href="#异或的特性" class="headerlink" title="异或的特性"></a>异或的特性</h1><blockquote><p>恒等律：X ⊕ 0 = X （X为任意整数）<br>归零律：X ⊕ X = 0 （X为任意整数）<br>交换律：A ⊕ B = B ⊕ A<br>结合律：(A ⊕ B) ⊕ C = A ⊕ (B ⊕ C)  </p></blockquote><h1 id="通过异或解决具体问题"><a href="#通过异或解决具体问题" class="headerlink" title="通过异或解决具体问题"></a>通过异或解决具体问题</h1><h2 id="判断两个数是否相等"><a href="#判断两个数是否相等" class="headerlink" title="判断两个数是否相等"></a>判断两个数是否相等</h2><p>技算机底层判断整数是否相等的方案：通过先将相应的位进行异或操作，然后将所有异或操作的结果进行或操作。因为执行异或操作没有进位，因此，这种方法比用ALU将两个数相减，然后再判断输出是否为0要快得多。</p><p>Linux中最初的ipv6_addr_equal()函数的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">static inline int ipv6_addr_equal(const struct in6_addr *a1, const struct in6_addr *a2)</div><div class="line">&#123;</div><div class="line">    return (a1-&gt;s6_addr32[0] == a2-&gt;s6_addr32[0] &amp;&amp;</div><div class="line">        a1-&gt;s6_addr32[1] == a2-&gt;s6_addr32[1] &amp;&amp;</div><div class="line">        a1-&gt;s6_addr32[2] == a2-&gt;s6_addr32[2] &amp;&amp;</div><div class="line">        a1-&gt;s6_addr32[3] == a2-&gt;s6_addr32[3]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">static inline int ipv6_addr_equal(const struct in6_addr *a1, const struct in6_addr *a2)</div><div class="line">&#123;</div><div class="line">    return (((a1-&gt;s6_addr32[0] ^ a2-&gt;s6_addr32[0]) |</div><div class="line">        (a1-&gt;s6_addr32[1] ^ a2-&gt;s6_addr32[1]) |</div><div class="line">        (a1-&gt;s6_addr32[2] ^ a2-&gt;s6_addr32[2]) |</div><div class="line">        (a1-&gt;s6_addr32[3] ^ a2-&gt;s6_addr32[3])) == 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h2><p>利用异或的特性：<font color="#ff0000">IF a ^ b = c THEN a ^ c = b, b ^ c = a</font></p><p><a href="http://zhilight.blog.51cto.com/9880628/1616966" target="_blank" rel="noopener">RAID</a>5，大概原理为：使用3块磁盘（A、B、C）组成RAID5阵列，当用户写数据时，将数据分成两部分，分别写到磁盘A和磁盘B，A ^ B的结果写到磁盘C；当读取A的数据时，通过B ^ C可以对A的数据做校验，当A盘出错时，通过B ^ C也可以恢复A盘的数据。</p><h2 id="bit位的一些操作"><a href="#bit位的一些操作" class="headerlink" title="bit位的一些操作"></a>bit位的一些操作</h2><h3 id="判断一个二进制数中1的数量是奇数还是偶数"><a href="#判断一个二进制数中1的数量是奇数还是偶数" class="headerlink" title="判断一个二进制数中1的数量是奇数还是偶数"></a>判断一个二进制数中1的数量是奇数还是偶数</h3><p>如100010111中1的数量是奇数还是偶数？</p><p>解答：1^0^0^0^1^0^1^1^1 = 1</p><h3 id="特定位进行翻转"><a href="#特定位进行翻转" class="headerlink" title="特定位进行翻转"></a>特定位进行翻转</h3><p>利用异或的特性：1^1=0，0^1=1。</p><p>如翻转100010111里的第5位？</p><p>解答：100010111 ^ 000010000 = 100000111</p><h2 id="不使用其他空间，交换两个值"><a href="#不使用其他空间，交换两个值" class="headerlink" title="不使用其他空间，交换两个值"></a>不使用其他空间，交换两个值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a,b;</div><div class="line">a = a ^ b;</div><div class="line">b = a ^ b; <span class="comment">// a^b^b=a</span></div><div class="line">a = a ^ b; <span class="comment">// a^b^a=b</span></div></pre></td></tr></table></figure><h2 id="一个整型数组里除了1个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字"><a href="#一个整型数组里除了1个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字" class="headerlink" title="一个整型数组里除了1个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字"></a>一个整型数组里除了<font color="#ff0000">1</font>个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字</h2><p>比如，从[3, 2, 3, 2, 4, 5, 5, 6, 6]中找出只出现一次的数字：4</p><p>利用异或的三个定律：归零律，交换律，结合律。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span> ^ <span class="number">2</span> ^ <span class="number">3</span> ^ <span class="number">2</span> ^ <span class="number">4</span> ^ <span class="number">5</span> ^ <span class="number">5</span> ^ <span class="number">6</span> ^ <span class="number">6</span></div><div class="line">= <span class="number">3</span> ^ <span class="number">3</span> ^ <span class="number">2</span> ^ <span class="number">2</span> ^ <span class="number">5</span> ^ <span class="number">5</span> ^ <span class="number">6</span> ^ <span class="number">6</span> ^ <span class="number">4</span></div><div class="line">= <span class="number">4</span></div></pre></td></tr></table></figure><h2 id="一个整型数组里除了2个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字"><a href="#一个整型数组里除了2个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字" class="headerlink" title="一个整型数组里除了2个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字"></a>一个整型数组里除了<font color="#ff0000">2</font>个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字</h2><p>比如，从[a, b, a, b, c, d, e, f, e, f]中找出只出现一次的数字：c, d</p><p><strong>思路</strong>：</p><ol><li>整体异或的结果为c与d的异或值：cXORd，因c != d，则 cXORd != 0；</li><li>利用cXORd的第一位值为1（比如从右向左第一位），来区分c与d，如下图所示：<br> <img src="/2017/08/18/异或总结/2.png" alt=""></li><li>从数组里，找到所有第二位都为1的数字，假设有：[ a, a, c, e, f, e, f]，再对这些数进行异或：a ^ a ^ c ^ e ^ f ^ e ^ f = c</li><li>再利用异或的特性：cXORd ^ c = d</li></ol><p>代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getFirstOneBit</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a | (~a + <span class="number">1</span>); <span class="comment">// 由a | -a即可以获取</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findTwo</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(array == <span class="keyword">null</span> || array.length == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> cXORd = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> item : array)&#123;</div><div class="line">        cXORd = cXORd ^ item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> firstOneBit = getFirstOneBit(cXORd);</div><div class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> item : array)&#123;</div><div class="line">        <span class="keyword">if</span>(getFirstOneBit(item) == firstOneBit)&#123;</div><div class="line">            c = c ^ item;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> d = cXORd ^ c;</div><div class="line"></div><div class="line">    System.out.printf(<span class="string">"findTwo num is %d, %d\n"</span>, c, d);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>时间复杂度为O(n)，空间复杂度O(1)</p><h2 id="一个整型数组里除了3个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字"><a href="#一个整型数组里除了3个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字" class="headerlink" title="一个整型数组里除了3个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字"></a>一个整型数组里除了<font color="#ff0000">3</font>个数字之外，其他的数字都出现两次，请查找出其中从一组数据中找出只出现一次的数字</h2><p>比如，从[a, b, a, b, c, d, e, f, f]中找出只出现一次的数字：c, d，e</p><p><strong>思路</strong>：</p><ol><li>整体异或的结果为c,d,e的异或值：cXORdXORe。同时(cXORdXORe ^ c) ^ (cXORdXORe ^ d) ^ (cXORdXORe ^ e) = 0</li><li>IF A ^ B ^ C = 0, 则可以得出如下结论：<br> <img src="/2017/08/18/异或总结/3.png" alt=""></li><li>把查找3个数字，转换为2个数字的问题</li></ol><p>代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findThree</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(array == <span class="keyword">null</span> || array.length == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> cXORdXORe = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> item : array)&#123;</div><div class="line">        cXORdXORe = cXORdXORe ^ item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> firstBit = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> item : array)&#123;</div><div class="line">        firstBit = firstBit ^ getFirstOneBit(cXORdXORe ^ item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> item : array)&#123;</div><div class="line">        <span class="keyword">if</span>(getFirstOneBit(cXORdXORe ^ item) == firstBit)&#123;</div><div class="line">            c = c ^ item;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    System.out.printf(<span class="string">"findThree num is %d "</span>, c);</div><div class="line"></div><div class="line">    <span class="keyword">int</span>[] findtwoArray = <span class="keyword">new</span> <span class="keyword">int</span>[array.length + <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.length; i++)&#123;</div><div class="line">        findtwoArray[i] = array[i];</div><div class="line">    &#125;</div><div class="line">    findtwoArray[findtwoArray.length - <span class="number">1</span>] = c;</div><div class="line">    findTwo(findtwoArray);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>时间复杂度O(n)，空间复杂度O(1)</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.lijinma.com/blog/2014/05/29/amazing-xor/" target="_blank" rel="noopener">感受异或的神奇</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;异或（exclusive-or）的定义&quot;&gt;&lt;a href=&quot;#异或（exclusive-or）的定义&quot; class=&quot;headerlink&quot; title=&quot;异或（exclusive or）的定义&quot;&gt;&lt;/a&gt;异或（exclusive or）的定义&lt;/h1&gt;&lt;p&gt;符号
      
    
    </summary>
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://handsomeliuyang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Jenkins服务搭建</title>
    <link href="https://handsomeliuyang.github.io/2017/07/14/Docker-Jenkins%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    <id>https://handsomeliuyang.github.io/2017/07/14/Docker-Jenkins服务搭建/</id>
    <published>2017-07-14T05:28:44.000Z</published>
    <updated>2017-07-25T02:55:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h1><p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。<br>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><h2 id="Docker理解"><a href="#Docker理解" class="headerlink" title="Docker理解"></a>Docker理解</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/07/14/Docker-Jenkins服务搭建/docker理解.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>Dockerfile面向开发，Docker 镜像成为交付标准，Docker 容器则涉及部署与运维</li><li>Docker类似于一个虚拟机，实现资源和系统环境的隔离</li><li>Docker镜像类似于Ghost系统，为了方便快速使用，已经完成了服务的所有配置。</li><li>DockerFile是一个脚本，用于生成Docker镜像的脚本</li><li>Docker镜像不仅可以从DockerFile生成，也可以从Docker容器生成，但最好是通过DockerFile来生成，方便后期维护。</li><li>我们创建新的镜像都是从系统镜像开始创建的，如centos:7，centos：6</li></ol><h1 id="通过Docker部署Jenkins的好处"><a href="#通过Docker部署Jenkins的好处" class="headerlink" title="通过Docker部署Jenkins的好处"></a>通过Docker部署Jenkins的好处</h1><p>Docker解决现在的迁移服务(如Android的Jenkins)存在的问题：</p><ol><li>服务器的系统版本不一致，容易出现新问题，如缺少一些库，或软件版本过底<br> Docker：容器里的操作系统版本与主机的系统版本没有关系，不受主机的系统版本影响</li><li>多个服务部署在同一台机器上，关联的软件出现相互影响<br> Docker：每个容器之间相互不影响，完全透明，类似虚拟机</li><li>需要写服务部署文档，软件版本之间的关系，但新系统有可能不支持这些老版本的软件<br> Docker：DockerFile就是整个部署文档，安装的软件与主机的系统没有关系</li><li>服务卸载的成本很高，很容易出现卸载不完全的问题<br> Docker：只需要删除容器，其安装的软件都可以清除</li><li>服务升级很不方便，需要一台新机器或搭建虚拟机来实现<br> Docker：容器升级操作系统版本非常简单，成本非常低，修改From的关联版本就行</li><li>本地文件管理比较乱，容易相互影响<br> Docker：容器之间的文件相互不影响</li></ol><h1 id="Docker入门介绍"><a href="#Docker入门介绍" class="headerlink" title="Docker入门介绍"></a>Docker入门介绍</h1><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>在centos上安装Docker的注意点：</p><ol><li>最低支持centos7.0系统才能安装docker</li><li>centos6.5以上也可以安装，但安装方法与centos7.0以上的安装方法不一样</li><li>具体教程可以网上查找</li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="DockerFile生成Docker镜像"><a href="#DockerFile生成Docker镜像" class="headerlink" title="DockerFile生成Docker镜像"></a>DockerFile生成Docker镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker build -t 镜像名称 DockerFile所在的目录</div><div class="line"></div><div class="line">// 例子</div><div class="line">docker build -t btown-jenkins .</div></pre></td></tr></table></figure><h3 id="从Docker镜像创建Docker容器"><a href="#从Docker镜像创建Docker容器" class="headerlink" title="从Docker镜像创建Docker容器"></a>从Docker镜像创建Docker容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker run [-d|-it] -p 主机端口:容器里的端口 -v 主机目录:容器里的目录 -v 主机目录:容器里的目录 镜像名称 bash</div><div class="line"></div><div class="line">// 例子</div><div class="line">docker run -it --name btown-jenkins -p 7000:8080 -v /data0/btown_jenkins_home/jobs:/var/lib/jenkins/jobs -v /data0/btown_jenkins_home/logs:/var/lib/jenkins/logs -v /data0/btown_jenkins_home/nodes:/var/lib/jenkins/nodes -v /data0/btown_jenkins_home/secrets:/var/lib/jenkins/secrets -v /data0/btown_jenkins_home/users:/var/lib/jenkins/users -v /data0/btown_jenkins_home/workspace:/var/lib/jenkins/workspace btown-jenkins bash</div></pre></td></tr></table></figure><ol><li>-d：此容器在后台运行</li><li>-it：当前控制台与容器交互</li><li>–name：创建的容器的名称</li><li>-p：端口映射，把主机的端口映射到容器里的端口</li><li>-v：目录映射，把容器里的目录映射到主机里的目录</li><li>bash：进入容器后的命令，bash表示直接进入shell状态</li></ol><h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><p>默认情况下，容器运行期间产生的文件，都处于沙箱当中，当容器删除后，也会自动删除，这会造成一些问题：</p><ol><li>服务生成的数据很不方便备份</li><li>容器挂了后，就无法恢复数据了</li><li>容器会变的非常的大</li><li>无法共享容器间的数据</li></ol><h4 id="Docker-容器文件系统"><a href="#Docker-容器文件系统" class="headerlink" title="Docker 容器文件系统"></a>Docker 容器文件系统</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/07/14/Docker-Jenkins服务搭建/Docker容器文件系统.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>Dockerfile  中的每一条命令，都在 Docker 镜像中以一个独立镜像层的形式存在</li><li>Docker 镜像是由 Dockerfile 构建而成，但并不是每一层 Docker 镜像中都含有相应的文件系统文件</li><li>Docker 容器的文件系统中不仅包含 Docker 镜像，还包含初始层（Init Layer）与可读写层（Read-Write Layer）。<ol><li>初始化层（Init Layer）：初始层中大多是初始化容器环境时，与容器相关的环境信息，如容器主机名，主机 host 信息以及域名服务文件等。</li><li>可读写层（Read-Write Layer）：这一层的作用非常大，Docker 的镜像层以及顶上的两层加起来，Docker 容器内的进程只对可读写层拥有写权限，其他层对进程而言都是只读的（Read-Only）</li></ol></li><li>Docker 容器有能力在可读写层看到VOLUME文件等内容，但那都仅仅是挂载点，真实内容位于宿主机上</li></ol><h4 id="Volume-命令"><a href="#Volume-命令" class="headerlink" title="Volume 命令"></a>Volume 命令</h4><p>为了能够保存（持久化）数据以及共享容器间的数据，Docker提出了Volume的概念。简单来说，Volume就是目录或者文件，它可以绕过默认的联合文件系统，而以正常的文件或者目录的形式存在于宿主机上。</p><p>有两种方式初始化Volume：</p><ol><li><p>不指定主机上的目录</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">run</span> -it --name btown-jenkins -v /data btown-jenkins bash</div></pre></td></tr></table></figure><p> 此命令会将/data挂载到容器中，并绕过联合文件系统，我们可以在主机上直接操作该目录，通过docker inspect命令找到Volume在主机上的存储位置：</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker inspect -f &#123;&#123;.Volumes&#125;&#125; btown-jenkins</div></pre></td></tr></table></figure><p> 类似的输出为：</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map[/data:/var/lib/docker/vfs/dir/cde167197ccc3e138a14f1a4f...b32cec92e79059437a9]</div></pre></td></tr></table></figure></li><li><p>指定主机上的目录：</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">run</span> -it --name btown-jenkins -v /home/data:/data btown-jenkins bash</div></pre></td></tr></table></figure><p> 命令将挂载主机的/home/data目录到容器内的/data目录上</p></li></ol><p>通过Volume挂载关键数据目录后，就可以解决上面出现的问题了</p><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><ol><li>查看所有镜像：docker images</li><li>删除镜像：docker rmi xxx</li><li>查看所有容器：docker ps -a</li><li>删除容器：docker rm xxx</li><li>退出容器：exit，CTRL+D</li><li>重新连接容器：<ol><li>docker attach xxx</li><li>docker exec -it xxx bash</li><li>差别：使用docker exec连接容器后，现执行exit退出容器，容器不会停止</li></ol></li><li>启动|停止容器：docker start|stop</li></ol><h2 id="DockerFile脚本语言"><a href="#DockerFile脚本语言" class="headerlink" title="DockerFile脚本语言"></a>DockerFile脚本语言</h2><p>Dockerfile 是一个类似 Makefile 的工具，主要用来自动化构建镜像。</p><p>先看一个例子：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 系统版本 由于需要glibc-2.14版本以上，所以要使用centos:7</span></div><div class="line"><span class="keyword">FROM</span> centos:<span class="number">7.3</span>.<span class="number">1611</span></div><div class="line"><span class="comment"># 作者信息</span></div><div class="line"><span class="keyword">MAINTAINER</span> liuyang@<span class="number">58</span>ganji.com</div><div class="line"></div><div class="line"><span class="comment"># 安装基础库</span></div><div class="line"><span class="keyword">RUN</span> yum -y update</div><div class="line"><span class="keyword">RUN</span> yum -y install wget</div><div class="line"></div><div class="line"><span class="comment"># 安装 Oracle Java 7 JDK，安装成功的目录：/usr/java/jdk1.7</span></div><div class="line"><span class="keyword">RUN</span> mkdir -p /data0/soft</div><div class="line"><span class="keyword">ADD</span> ./jdk-7u80-linux-x64.rpm /data0/soft/jdk-7u80-linux-x64.rpm</div><div class="line"><span class="keyword">RUN</span> rpm -ivh /data0/soft/jdk-7u80-linux-x64.rpm</div><div class="line"></div><div class="line"><span class="comment"># 设置jdk的环境变量</span></div><div class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/java/jdk1.<span class="number">7.0</span>_80</div><div class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/jre/bin:$JAVA_HOME/bin</div><div class="line"></div><div class="line"><span class="comment"># 复制ssh key</span></div><div class="line"><span class="keyword">COPY</span> ./ssh.tar /data0/soft/ssh.tar</div><div class="line"><span class="keyword">RUN</span> cd /data0/soft &amp;&amp; tar xvf ssh.tar</div><div class="line"><span class="keyword">RUN</span> cp -r -f /data0/soft/.ssh /var/lib/jenkins/</div><div class="line"><span class="keyword">RUN</span> chmod -R 777 /var/lib/jenkins/.ssh</div><div class="line"></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></div><div class="line"></div><div class="line"><span class="keyword">ENTRYPOINT</span> service jenkins start</div></pre></td></tr></table></figure></p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>Dockerfile 中所有的命令都是以下格式：<font color="#ff0000">INSTRUCTION argument</font></p><p>指令(INSTRUCTION)不分大小写，但是推荐大写。</p><h3 id="FROM-命令"><a href="#FROM-命令" class="headerlink" title="FROM 命令"></a>FROM 命令</h3><font color="#ff0000">FROM &lt;image name&gt;</font>，例如 <font color="#ff0000">FROM ubuntu</font><p>所有的 Dockerfile 都用该以 FROM 开头，FROM 命令指明 Dockerfile 所创建的镜像文件以什么镜像为基础，FROM 以后的所有指令都会在 FROM 的基础上进行创建镜像；可以在同一个 Dockerfile 中多次使用 FROM 命令用于创建多个镜像。</p><h3 id="MAINTAINER-命令"><a href="#MAINTAINER-命令" class="headerlink" title="MAINTAINER 命令"></a>MAINTAINER 命令</h3><p><font color="#ff0000">MAINTAINER &lt;author name&gt;</font> 用于指定镜像创建者和联系方式。</p><h3 id="RUN-命令"><a href="#RUN-命令" class="headerlink" title="RUN 命令"></a>RUN 命令</h3><p><font color="#ff0000">RUN &lt;command&gt;</font> 用于容器内部执行命令。每个 RUN 命令相当于在原有的镜像基础上添加了一个改动层，原有的镜像不会有变化。</p><h3 id="ADD-命令"><a href="#ADD-命令" class="headerlink" title="ADD 命令"></a>ADD 命令</h3><p><font color="#ff0000">ADD &lt;src&gt; &lt;dst&gt;</font> 用于从将 &lt;src&gt; 文件复制到 &lt;dst&gt;<br>文件：&lt;src&gt; 是相对被构建的源目录的相对路径，可以是文件或目录的路径，也可以是一个远程的文件 url，&lt;dst&gt; 是容器中的绝对路径。</p><p><strong><em>注意</em></strong>：如果源文件是压缩文件（如.tar,.zip等等），会自动解压，如果不想自动解压，可以使用copy命令</p><h3 id="COPY指令"><a href="#COPY指令" class="headerlink" title="COPY指令"></a>COPY指令</h3><p>COPY指令和ADD指令功能和使用方式类似。只是COPY指令不会做自动解压工作。</p><h3 id="ENV-命令"><a href="#ENV-命令" class="headerlink" title="ENV 命令"></a>ENV 命令</h3><p>设置环境变量，参考 export 的用法咧：<br>ENV LC_ALL en_US.UTF-8</p><h3 id="EXPOSE-命令"><a href="#EXPOSE-命令" class="headerlink" title="EXPOSE 命令"></a>EXPOSE 命令</h3><p><font color="#ff0000">EXPOSE &lt;port&gt; [&lt;port&gt;…]</font> 命令用来指定对外开放的端口。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></div><div class="line"><span class="comment"># 不推荐这样写，会固定死映射端口，最好通过创建容器时来指定</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span>:<span class="number">8080</span></div></pre></td></tr></table></figure><p>注意：除EXPOSE 8000:8080是提前指定了映射端口外，其他的相当于一个声明而已，具体端口映射还是在创建容器时指定的。</p><h3 id="ENTRYPOINT-命令"><a href="#ENTRYPOINT-命令" class="headerlink" title="ENTRYPOINT 命令"></a>ENTRYPOINT 命令</h3><p><font color="#ff0000">ENTRYPOINT command param1 param2</font> 用来指定启动容器时，执行的命令</p><h1 id="生成DockerFile的流程"><a href="#生成DockerFile的流程" class="headerlink" title="生成DockerFile的流程"></a>生成DockerFile的流程</h1><p>由于每个重新执行一次DockerFile文件的时间很长，所以写DockerFile的最佳方案：</p><ol><li>创建一个最初的容器，再执行成功一个命令后，就添加到DockerFile文件里，等全部OK后，DockerFile也就创建完了</li><li>再整体执行DockerFile文件，查看创建镜像是否成功</li></ol><h1 id="Docker的容器的性能"><a href="#Docker的容器的性能" class="headerlink" title="Docker的容器的性能"></a>Docker的容器的性能</h1><p>具体内容请查看：<a href="http://blog.csdn.net/cbl709/article/details/43955687" target="_blank" rel="noopener">docker与虚拟机性能比较</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/07/14/Docker-Jenkins服务搭建/docker与虚拟机比较.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>docker比虚拟机的优势：<ol><li>docker有着比虚拟机更少的抽象层</li><li>docker利用的是宿主机的内核，而不需要Guest OS</li><li>docker计算效率与主机一样，没有损耗，但虚拟机的计算能力损耗在50%左右<br> <img src="/2017/07/14/Docker-Jenkins服务搭建/计算效率.png" alt=""></li><li>docker与虚拟机内存访问效率要高<br> <img src="/2017/07/14/Docker-Jenkins服务搭建/虚拟内存.png" alt=""></li><li>docker与虚拟机启动时间及资源耗费要高</li></ol></li><li>docker的劣势：<ol><li>资源隔离方面不如虚拟机，docker是利用cgroup实现资源限制的，只能限制资源消耗的最大值，而不能隔绝其他程序占用自己的资源</li><li>安全性问题。docker目前并不能分辨具体执行指令的用户，只要一个用户拥有执行docker的权限，那么他就可以对docker的容器进行所有操作，不管该容器是否是由该用户创建。比如A和B都拥有执行docker的权限，由于docker的server端并不会具体判断docker cline是由哪个用户发起的，A可以删除B创建的容器，存在一定的安全风险。 </li><li>docker目前还在版本的快速更新中，细节功能调整比较大。一些核心模块依赖于高版本内核，存在版本兼容问题</li></ol></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://www.runoob.com/docker/docker-tutorial.html" target="_blank" rel="noopener">Docker 教程</a></li><li><a href="http://guide.daocloud.io/dcs/docker-9153976.html" target="_blank" rel="noopener">一图看尽 docker 容器文件系统</a></li><li><a href="http://blog.csdn.net/cbl709/article/details/43955687" target="_blank" rel="noopener">docker与虚拟机性能比较</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker介绍&quot;&gt;&lt;a href=&quot;#Docker介绍&quot; class=&quot;headerlink&quot; title=&quot;Docker介绍&quot;&gt;&lt;/a&gt;Docker介绍&lt;/h1&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。
      
    
    </summary>
    
      <category term="Server" scheme="https://handsomeliuyang.github.io/categories/Server/"/>
    
    
      <category term="jenkins" scheme="https://handsomeliuyang.github.io/tags/jenkins/"/>
    
      <category term="docker" scheme="https://handsomeliuyang.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>如何设计高保真原型图</title>
    <link href="https://handsomeliuyang.github.io/2017/03/14/Axure%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%9E%8B%E5%9B%BE/"/>
    <id>https://handsomeliuyang.github.io/2017/03/14/Axure设计原型图/</id>
    <published>2017-03-14T08:00:00.000Z</published>
    <updated>2017-03-20T05:27:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在设计“专项测试平台项目”的需求文档时，按传统的word设计需求文档带来的问题：</p><ol><li>文档不够详细，没有交互，没有各种出错的处理情况</li><li>没有一个平台的功能流程全貌，无法提前给上级审核</li><li>需求评审的效率很低</li></ol><p>通过分析，发现主要原因是出在需求文档上，现在的静态word文档，能表达的信息很有限，那有没有更好的方式。这就是今天要分享的：高保真原型图。</p><blockquote><p>注意：实现高保真原型图的软件有很多，完全不限于Axure</p></blockquote><h1 id="高保真原型图Axure"><a href="#高保真原型图Axure" class="headerlink" title="高保真原型图Axure"></a>高保真原型图Axure</h1><h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>我们可以通过房屋装修来理解，在房屋真正开始装修之前，我们要做很多的工作，如看建材，看家电，看家具，看设计师做的效果图。这些都是为了在开始真正装修之前，尽最大可能去了解最终效果是什么样子，是不是我们想要的，因为一旦开始装修，就很难去更改。</p><p>这时如果能把想要装修的房子变成一个真实的样板间，我们看提前看到所有的效果，家电，家具等等，而且还能进行体验，提出改进意见，满意后，才真正开始装修。</p><p>高保真原型图Axure就是制作这个真实样板间的工具。总结几点好处：</p><ol><li>实现功能与视觉上的统一，通过实际演示，减少口头沟通</li><li>领导与用户可以提前体验最终效果，可以提前收到他们的反馈意见</li><li>开发者终于可以了解你想要什么。以前用文档与图片无法解释清楚的需求，现在可以很容易的让开发者理解</li></ol><h2 id="Axure版本"><a href="#Axure版本" class="headerlink" title="Axure版本"></a>Axure版本</h2><ol><li>使用的是AxureRP Pro 7.0版本，同时下载注册机</li><li>下载对应版本的汉化包</li></ol><h2 id="Axure的主要功能"><a href="#Axure的主要功能" class="headerlink" title="Axure的主要功能"></a>Axure的主要功能</h2><h3 id="线框图-设计"><a href="#线框图-设计" class="headerlink" title="线框图+设计"></a>线框图+设计</h3><p>仅仅使用方块，占位符，形状和文本设计的，称之为线框图，如下图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/线框图.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>对线框图进行视觉美化设计后，称之为高保真原型图，如下图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/高保真原型图.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>线框图与高保真原型图的差别，仅仅是真实程序不一样而已</p><h3 id="母版"><a href="#母版" class="headerlink" title="母版"></a>母版</h3><p>母版可以理解为PPT里的母版，是可以复用部分。设计网站时，网站的导航栏，Footer等等都是通用的组件，每个页面都有，这时可以创建一个母版，实现复用，如下所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/母版.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="元件库"><a href="#元件库" class="headerlink" title="元件库"></a>元件库</h3><p>原生自带的元件库只适合做线框图，要做手机app的原型图设计的话，工作量会比较大，这时可以导入其他的元件库，如下导入了ios8组合元件库：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/元件库.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="动态面板"><a href="#动态面板" class="headerlink" title="动态面板"></a>动态面板</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/动态图1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上面的功能模块，在原型图里实现，就可以使用动态面板，动态面板是指在同一个区域里，有多种展示形态：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/动态面板.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="控件连线"><a href="#控件连线" class="headerlink" title="控件连线"></a>控件连线</h3><p>通过如下可以把两个控件进行连接：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/连线.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h3><p>给控件添加交互，就是给此控件添加：事件(event)，用例(case)，动作(action)。</p><ol><li>事件，如鼠标点击事件，鼠标移入时，鼠标移出时等等</li><li>用例，发生事件后，做什么样的业务逻辑判断</li><li>动作，即这个用例下，执行什么下的动作</li></ol><p>如下创建的交互：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/交互1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>事件的种类：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/所有的事件.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>用例与其条件：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/用例.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>常用的动作有：</p><ol><li>打开新的链接</li><li>动态面板切换</li><li>设置显示/隐藏</li></ol><h3 id="浏览器展示"><a href="#浏览器展示" class="headerlink" title="浏览器展示"></a>浏览器展示</h3><p>直接可以在预览，但为了不出现显示问题，建议使用chrome浏览器进行预览</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>每个控件可以添加文档<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/控件文档.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>当前页面也可以添加文档<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/页面说明文档.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="合作"><a href="#合作" class="headerlink" title="合作"></a>合作</h3><ol><li>通过AxShare可以实现合作编辑 <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/03/14/Axure设计原型图/合并编辑.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>通过版本管理来保存原文件，进行合作编辑</li></ol><h1 id="工具对比"><a href="#工具对比" class="headerlink" title="工具对比"></a>工具对比</h1><ul><li>Axure PR<ol><li>学习成本也非常高</li><li>专业的原型设计工具</li><li>可以实现很复杂的交互</li><li><a href="https://www.axure.com/" target="_blank" rel="noopener">官网</a></li></ol></li><li>Mockplus<ol><li>有免费版本，简洁高效，关注设计，而非工具</li><li><a href="https://www.mockplus.cn/" target="_blank" rel="noopener">官网</a></li></ol></li><li><a href="http://www.shejidaren.com/wireframe-tools-you-must-try-in-2016.html" target="_blank" rel="noopener">更多请点击</a></li></ul><h1 id="谁来制作高保真原型"><a href="#谁来制作高保真原型" class="headerlink" title="谁来制作高保真原型"></a>谁来制作高保真原型</h1><p>产品经理与设计师是高保真原型的制作者。（技术做支持）</p><ul><li>产品经理负责收集各方面的需求，在平衡各种资源后，确定最值得开发的产品的功能</li><li>设计师按照这个功能的规划制作视觉体现，然后产品经理和设计师一起，将功能点、设计图和交互流程一起合并为高保真原型。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>Axure RP高保真网页原型制作</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在设计“专项测试平台项目”的需求文档时，按传统的word设计需求文档带来的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文档不够详细，没有交互，没有各种
      
    
    </summary>
    
      <category term="设计" scheme="https://handsomeliuyang.github.io/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="axure" scheme="https://handsomeliuyang.github.io/tags/axure/"/>
    
  </entry>
  
  <entry>
    <title>前端学习系列2：从移动端的角度学习与分析Redux</title>
    <link href="https://handsomeliuyang.github.io/2017/01/15/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%EF%BC%9A%E4%BB%8E%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E8%A7%92%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%88%86%E6%9E%90Redux/"/>
    <id>https://handsomeliuyang.github.io/2017/01/15/前端学习系列：从移动端的角度学习与分析Redux/</id>
    <published>2017-01-15T08:00:00.000Z</published>
    <updated>2017-02-20T12:24:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>通过上往篇文章<a href="https://handsomeliuyang.github.io/2016/12/30/Robot%E6%A1%86%E6%9E%B6-Nodejs+Express+React+MaterialUI/">前端学习系列：基于React的Robot框架的踩坑之旅</a>介绍，已经搭建起React的整体环境，但在进行具体业务开发时，还是遇到如下问题：</p><ol><li>所有界面操作，如网络请求，点击事件等等都在同一个组件里完成，出现组件过于庞大的问题</li><li>子组件与父组件只能通过回调方法进行通信，没有一个消息总线机制（如：子组件想决定框架Master里的title，除了通过回调方法，尽没有找到其他方法）</li><li>无法进行单元测试，基本只能整体测试，无法对其的界面与数据进行分别测试</li><li>关键日志无法添加，就像Android开发里也一样，关键日志只能通过手动去添加</li></ol><h1 id="Redux动机"><a href="#Redux动机" class="headerlink" title="Redux动机"></a>Redux动机</h1><p>通过调研，最终选择Redux。Redux主要用来解决如下问题：</p><ol><li>界面的变化在React理解为state的变化，当功能复杂时，state的变化非常之多，state在什么时候，由于什么原因，如何变化已然不受控制。这时我们遇到问题，进行重现也变的非常困难。—- <font color="#ff0000">做Android开发，也有同感，当QA遇到一个比较难复现的bug时，RD就很难定位问题。</font></li><li>React开发时，state的变化与异步是混在一起的（异步可以理解为业务逻辑，如用户交互，网络请求，具体业务功能等等）。只有把state的变化与异步进行分离，才能很好的进行管理。—- <font color="#ff0000">客户端开发，为什么会有MVC，MVVM，MVP等等框架，其实也是同样的出发点，尽量把展示与数据进行分离</font></li></ol><h1 id="运行todos例子"><a href="#运行todos例子" class="headerlink" title="运行todos例子"></a>运行todos例子</h1><ol><li>下载redux的原码。<a href="https://github.com/reactjs/redux" target="_blank" rel="noopener">github的地址</a></li><li>安装node，注意node的版本号一定要&gt;4.0。因为0.x版本不支持es6等等高级语法。或者进行node版本升级，<a href="http://www.jianshu.com/p/31d4f9a7f401" target="_blank" rel="noopener">node升级教程</a></li><li><p>进入todos的目录，执行以下命令，安装dependencies</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node install</div></pre></td></tr></table></figure></li></ol><ol><li><p>运行</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node start</div></pre></td></tr></table></figure></li></ol><h1 id="Redux实现"><a href="#Redux实现" class="headerlink" title="Redux实现"></a>Redux实现</h1><blockquote><p>注意：项目中的代码都是以redux的官方例子todos，为基础进行改造的</p></blockquote><p>Redux里的state其实就是一个对象，或者可以理解为一个json数据，如下所示：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">todos: [</div><div class="line">&#123;</div><div class="line">text: 'Eat food',</div><div class="line">completed: true</div><div class="line">  &#125;, </div><div class="line">  &#123;</div><div class="line">    text: 'Exercise',</div><div class="line">    completed: false</div><div class="line">  &#125;</div><div class="line">],</div><div class="line">  visibilityFilter: 'SHOW_COMPLETED'</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Redux的核心思想很容易理解，只有三大概率：Action，Reducer，Store。其关系如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/01/15/前端学习系列：从移动端的角度学习与分析Redux/redux框架.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><ol><li>React组件通过Store监听state的变化</li><li>调用方通过调用Store的dispatch()方法发送动作action</li><li>Store通过Reducer把action对象转换为state对象</li><li>Store更新内部保存的state对象，并广播监听者进行界面刷新与变化</li></ol><p>具体代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"></div><div class="line"><span class="comment">// reducers，用来把action转换为state</span></div><div class="line"><span class="keyword">const</span> reducers = <span class="function">(<span class="params">state = [], action</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        ...state,</div><div class="line">        &#123;</div><div class="line">        <span class="attr">text</span>: action.text</div><div class="line">      &#125;</div><div class="line">      ]</div><div class="line">      &#125;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> state</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 创建store，全局只有一个store单例</span></div><div class="line"><span class="keyword">const</span> store = createStore(reducers)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line"></div><div class="line">    <span class="comment">// 当前组件的state的默认值</span></div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">todos</span>:[]&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 对state进行订阅</span></div><div class="line">store.subscribe(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line"><span class="keyword">let</span> reduxState = store.getState();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"redux's state"</span>, reduxState);</div><div class="line"></div><div class="line"><span class="keyword">let</span> currentTodos = store.getState().todos;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state.todos !== currentTodos) &#123;</div><div class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">todos</span>:currentTodos&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">addTodo = <span class="function">(<span class="params">text</span>) =&gt;</span> (&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'ADD_TODO'</span>,</div><div class="line">  text</div><div class="line">&#125;);</div><div class="line"></div><div class="line">render()&#123;</div><div class="line"><span class="keyword">let</span> input;</div><div class="line"><span class="keyword">const</span> &#123; todos &#125; = <span class="keyword">this</span>.state;</div><div class="line"><span class="keyword">return</span> (</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;e</span> =&gt;</span> &#123;</div><div class="line">      e.preventDefault()</div><div class="line">        if (!input.value.trim()) &#123;</div><div class="line">          return</div><div class="line">        &#125;</div><div class="line">        // 发送action</div><div class="line">        store.dispatch(this.addTodo(input.value))</div><div class="line">        input.value = ''</div><div class="line">      &#125;&#125;&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;node</span> =&gt;</span> &#123;</div><div class="line">          input = node</div><div class="line">        &#125;&#125; /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line">          Add Todo</div><div class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    &#123;todos.map(todo =&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;todo.text&#125;</span>&gt;</span></div><div class="line">    &#123;todo.text&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    )&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">render(</div><div class="line"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>,</div><div class="line">document.getElementById('root')</div><div class="line">)</div></pre></td></tr></table></figure><p>运行效果如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/01/15/前端学习系列：从移动端的角度学习与分析Redux/todos例子.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h1 id="Redux扩展"><a href="#Redux扩展" class="headerlink" title="Redux扩展"></a>Redux扩展</h1><h2 id="reducer的拆分"><a href="#reducer的拆分" class="headerlink" title="reducer的拆分"></a>reducer的拆分</h2><p>reducer的作用是把action转换为state，当app变大后，需要对reducer进行拆分。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/01/15/前端学习系列：从移动端的角度学习与分析Redux/redux_reducer.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>redux的整体特点：</p><ol><li>Store里保持的state是整体程序app的所有状态</li><li>每个action只是处理某一种行为</li><li>reducer的最简单的拆分方式，就是按不同的type类弄进行拆分</li></ol><p>reducer拆分后的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> reducer_todos = <span class="function">(<span class="params">state = [], action</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</div><div class="line">      <span class="keyword">return</span> [</div><div class="line">        ...state,</div><div class="line">        &#123;</div><div class="line">        <span class="attr">text</span>: action.text</div><div class="line">      &#125;</div><div class="line">  ]</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> state</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> initialState = &#123;</div><div class="line"><span class="attr">todos</span>:[]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> reducer_root = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</div><div class="line"><span class="attr">todos</span>: reducer_todos(state.todos, action)</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 创建store，全局只有一个store单例</span></div><div class="line"><span class="keyword">const</span> store = createStore(reducer_root)</div></pre></td></tr></table></figure><ol><li>Object.assign()用于拷贝两个对象的值，state对象是不能被修改。不然很容易出现不可预测的异常</li><li>reducer_root处理好整体拆分后，每个子reducer就只需要处理自己的数据转换。其他的数据自动继承</li></ol><p>问题：由于所有界面的state都直接保存在内存里，当某界面离开后，其数据还是会一直保留在Store当中？<br>处理方案：如一些页面的数据比较多，同时是不常用的界面，可以在退出此页面时，发送一个action，对数据进行清除。</p><h3 id="combineReducers-reducers"><a href="#combineReducers-reducers" class="headerlink" title="combineReducers(reducers)"></a>combineReducers(reducers)</h3><p>上面的reducer的拆分方式都是一样的代码，可以提取api对外提供。其实现原理与上面类似，修改后的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> todos = <span class="function">(<span class="params">state = [], action</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</div><div class="line">      <span class="keyword">return</span> [</div><div class="line">        ...state,</div><div class="line">        &#123;</div><div class="line">        <span class="attr">text</span>: action.text</div><div class="line">      &#125;</div><div class="line">  ]</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> state</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> reducer_root = combineReducers(&#123;</div><div class="line">todos</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 创建store，全局只有一个store单例</span></div><div class="line"><span class="keyword">const</span> store = createStore(reducer_root)</div></pre></td></tr></table></figure><p>combineReducers()方法处理了三个功能：</p><ol><li>生成state的初始值</li><li>通过方法名，自动生成key</li><li>自动传入state, action参数，并调用方法，重新生成state</li></ol><h2 id="调用与监听优化"><a href="#调用与监听优化" class="headerlink" title="调用与监听优化"></a>调用与监听优化</h2><p>上面的redux的使用方法有如下问题：</p><ol><li>会对使用者暴露store对象，store只能在一处初始化，需要传入到每个子组件，如果都是通过组件的props来传递，这个就很麻烦，尤其是当子view及层级比较多的时候</li><li>业务方每次都要进行监听，并进行数据转换，把redux的state转换为React的state对象，转换过程，要考虑一些性能问题，由于只要有一个子数据变化，所有监听者都会被触发通知，为了减少无用界面刷新，要做一些特殊处理。</li></ol><p>解决方案：进行封装</p><ol><li>store的传递封装，React里给组件传递对象，除了使用props属性外，还提供了一个全局传递方案：Context。<a href="https://facebook.github.io/react/docs/context.html" target="_blank" rel="noopener">具体请查看</a></li><li>包装一个容器组件，里面封装监听redux，并进行数据转换的工作</li></ol><p>改进后的流程图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/01/15/前端学习系列：从移动端的角度学习与分析Redux/redux框架_1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h3><p>在学习react-redux时，需要先了解一下容器组件与展示组件的概念。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/01/15/前端学习系列：从移动端的角度学习与分析Redux/容器组件与展示组件区别.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>技术上讲你可以直接使用 store.subscribe() 来编写容器组件。但不建议这么做因为就无法使用 React Redux 带来的性能优化。也因此，不要手写容器组件，都是使用 React Redux 的 connect() 方法来生成。</p><p><a href="https://github.com/reactjs/react-redux" target="_blank" rel="noopener">react-redux</a>的作用就是上面的解决方案的具体实现，我们看一下使用了react-redux的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></div><div class="line"><span class="keyword">import</span> &#123; createStore, combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="keyword">import</span> &#123; Provider, connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="comment">// import App from './components/App'</span></div><div class="line"><span class="comment">// import reducer from './reducers'</span></div><div class="line"></div><div class="line"><span class="comment">// reducers，用来把action转换为state</span></div><div class="line"><span class="keyword">const</span> todos = <span class="function">(<span class="params">state = [], action</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</div><div class="line">      <span class="keyword">return</span> [</div><div class="line">        ...state,</div><div class="line">        &#123;</div><div class="line">        <span class="attr">text</span>: action.text</div><div class="line">      &#125;</div><div class="line">  ]</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> state</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> reducer_root = combineReducers(&#123;</div><div class="line">todos</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 创建store，全局只有一个store单例</span></div><div class="line"><span class="keyword">const</span> store = createStore(reducer_root)</div><div class="line"></div><div class="line"><span class="comment">// actions</span></div><div class="line"><span class="keyword">const</span> addTodo = <span class="function">(<span class="params">text</span>) =&gt;</span> (&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'ADD_TODO'</span>,</div><div class="line">  text</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line"></div><div class="line">    <span class="comment">// 当前组件的state的默认值</span></div><div class="line">    <span class="comment">// this.state = &#123;todos:[]&#125;;</span></div><div class="line"></div><div class="line">    <span class="comment">// 对state进行订阅</span></div><div class="line"><span class="comment">// store.subscribe(()=&gt;&#123;</span></div><div class="line"><span class="comment">// let reduxState = store.getState();</span></div><div class="line"><span class="comment">// console.log("redux's state", reduxState);</span></div><div class="line"></div><div class="line"><span class="comment">// let currentTodos = store.getState().todos;</span></div><div class="line"></div><div class="line"><span class="comment">//   if (this.state.todos !== currentTodos) &#123;</span></div><div class="line"><span class="comment">//   this.setState(&#123;todos:currentTodos&#125;);</span></div><div class="line"><span class="comment">//   &#125;</span></div><div class="line"><span class="comment">// &#125;);</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">render()&#123; <span class="comment">// React的界面布局</span></div><div class="line"><span class="keyword">let</span> input;</div><div class="line"><span class="keyword">const</span> &#123; todos, addTodo &#125; = <span class="keyword">this</span>.props;<span class="comment">//this.state;</span></div><div class="line"><span class="keyword">return</span> (</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;e</span> =&gt;</span> &#123;</div><div class="line">      e.preventDefault()</div><div class="line">        if (!input.value.trim()) &#123;</div><div class="line">          return</div><div class="line">        &#125;</div><div class="line">        // 发送action</div><div class="line">        // store.dispatch(this.addTodo(input.value))</div><div class="line">        addTodo(input.value);</div><div class="line">        input.value = ''</div><div class="line">      &#125;&#125;&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;node</span> =&gt;</span> &#123;</div><div class="line">          input = node</div><div class="line">        &#125;&#125; /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line">          Add Todo</div><div class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    &#123;todos.map(todo =&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;todo.text&#125;</span>&gt;</span></div><div class="line">    &#123;todo.text&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    )&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const mapStateToProps = (state, ownProps) =&gt; &#123;</div><div class="line">console.log('state value is ', state);</div><div class="line">return &#123;</div><div class="line">todos: state.todos</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">App = connect(mapStateToProps, &#123;</div><div class="line">addTodo</div><div class="line">&#125;)(App);</div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">  document.getElementById('root')</div><div class="line">)</div></pre></td></tr></table></figure><p>要点：</p><ol><li>react-redux通过提供Provider与connect()方法实现接入层的解耦</li><li>Provider的作用比较简单，用来实现全局的store对象的传递，里面的实现原理就是通过React的Context来实现的，如下面就是Provider的原码 <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/01/15/前端学习系列：从移动端的角度学习与分析Redux/provider.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p>connect()比较复杂，其主要是两件事情：</p><ol><li>把redux的state转换为React组件的props属性</li><li><p>把action方法进行dispatch包装，再通过React组件的props属性传给React组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connect</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  initSubscription() &#123;</div><div class="line">    <span class="keyword">if</span> (shouldHandleStateChanges) &#123;</div><div class="line">      <span class="keyword">const</span> subscription = <span class="keyword">this</span>.subscription = <span class="keyword">new</span> Subscription(<span class="keyword">this</span>.store, <span class="keyword">this</span>.parentSub)</div><div class="line">      <span class="keyword">const</span> dummyState = &#123;&#125;</div><div class="line"></div><div class="line">      subscription.onStateChange = <span class="function"><span class="keyword">function</span> <span class="title">onStateChange</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.selector.run(<span class="keyword">this</span>.props)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.selector.shouldComponentUpdate) &#123;</div><div class="line">          subscription.notifyNestedSubs()</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">this</span>.componentDidUpdate = <span class="function"><span class="keyword">function</span> <span class="title">componentDidUpdate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.componentDidUpdate = <span class="literal">undefined</span></div><div class="line">            subscription.notifyNestedSubs()</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">this</span>.setState(dummyState)</div><div class="line">        &#125;</div><div class="line">      &#125;.bind(<span class="keyword">this</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> selector = <span class="keyword">this</span>.selector</div><div class="line">    selector.shouldComponentUpdate = <span class="literal">false</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (selector.error) &#123;</div><div class="line">      <span class="keyword">throw</span> selector.error</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> createElement(WrappedComponent, <span class="keyword">this</span>.addExtraProps(selector.props))</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol></li></ol><p>把redux的state转换为react的props，比转换为react的state属性的好处：</p><ol><li>对于React组件而言，外界有仅只能通过组件的props对此组件进行控制，内部的state不对外进行暴露，一切都是通过外界传入的props参数来进行控制，真正实现业务与界面分离解耦</li><li>组件可以做到与Redux解耦，组件能快速脱离Redux，并为一个共用组件</li></ol><h2 id="Middleware中间件"><a href="#Middleware中间件" class="headerlink" title="Middleware中间件"></a>Middleware中间件</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2017/01/15/前端学习系列：从移动端的角度学习与分析Redux/中间件.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>中间件：提供的是位于 action 被发起之后，到达 reducer 之前的扩展点。那么利用中间件，我们就可以做很多的事情，如：</p><ol><li>网络请求</li><li>实现异步（此异步与android里的线程有差异）</li><li>日志记录</li><li>。。。</li></ol><p>中间件的特点：</p><ol><li>action的发送是顺序发送的，即第一个中间件处理后，才会传给第二个中间件处理。</li><li>中间件的注册是有顺序的</li><li>中间件可以决定是否再传递action</li></ol><p>通过学习：<a href="http://cn.redux.js.org/docs/advanced/Middleware.html" target="_blank" rel="noopener">中间件实现的具体演化过程</a>可以了解javascript的一些语言特点：Monkey-Patching。相当于Java里的hook，对对象里方法进行proxy。但具体原因不一样：</p><ol><li>javascript的Monkey-Patching是利用javascript的函数也是一个变量，可以被修改特点来实现的</li><li>java里的hook，是通过子类可以重写父类的方法来实现的。</li></ol><h1 id="Redux在实际项目中的好处"><a href="#Redux在实际项目中的好处" class="headerlink" title="Redux在实际项目中的好处"></a>Redux在实际项目中的好处</h1><p>我在Robot项目里，使用了Redux，我的体验有：</p><ol><li>界面与业务分离，写界面时，不用思考业务流程是如何的，只要思考界面与数据的关系。</li><li>网络请求代码，业务逻辑与界面解耦</li><li>调试问题非常方便，不像之前需要大量添加console.log()。一般可以通过action，state的日志就可以分析出原因，是由后台数据问题，还是界面问题</li><li>可实现录制与回放—-此好处还没有实现</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://cn.redux.js.org/index.html" target="_blank" rel="noopener">Redux 中文文档</a></li><li><a href="https://github.com/reactjs/redux" target="_blank" rel="noopener">Redux</a></li><li><a href="https://github.com/reactjs/redux/tree/master/examples/real-world" target="_blank" rel="noopener">redux例子：real-world</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;遇到的问题&quot;&gt;&lt;a href=&quot;#遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题&quot;&gt;&lt;/a&gt;遇到的问题&lt;/h1&gt;&lt;p&gt;通过上往篇文章&lt;a href=&quot;https://handsomeliuyang.github.io/2016/12/
      
    
    </summary>
    
      <category term="前端" scheme="https://handsomeliuyang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://handsomeliuyang.github.io/tags/React/"/>
    
      <category term="Robot" scheme="https://handsomeliuyang.github.io/tags/Robot/"/>
    
      <category term="nodejs" scheme="https://handsomeliuyang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>前端学习系列：基于React的Robot框架的踩坑之旅</title>
    <link href="https://handsomeliuyang.github.io/2016/12/30/Robot%E6%A1%86%E6%9E%B6-Nodejs+Express+React+MaterialUI/"/>
    <id>https://handsomeliuyang.github.io/2016/12/30/Robot框架-Nodejs+Express+React+MaterialUI/</id>
    <published>2016-12-30T05:00:00.000Z</published>
    <updated>2017-01-05T02:45:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>上次给大家介绍Robot平台框架，其特点：</p><ol><li>由nodejs+express+react+bootstrap实现</li><li>UI使用开源UI库：<a href="https://github.com/usmanhalalit/charisma" target="_blank" rel="noopener">charisma</a></li><li>React通过browserify+babel打包处理</li></ol><p>效果如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/12/30/Robot框架-Nodejs+Express+React+MaterialUI/robot界面.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>其中遇到的一些问题：</p><ol><li><p>前端界面框架没有真正的React化，只使用很少一部分，html页面里，还有大量的js引用配置，css引用配置</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html引用css部分</span></div><div class="line">&lt;link href=<span class="string">"../../other_js_lib/charisma/css/charisma-app.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</div><div class="line">&lt;link href='../../other_js_lib/charisma/bower_components/fullcalendar/dist/fullcalendar.css' rel='stylesheet'&gt;</div><div class="line">&lt;link href='../../other_js_lib/charisma/bower_components/fullcalendar/dist/fullcalendar.print.css' rel='stylesheet' media='print'&gt;</div><div class="line">&lt;link href='../../other_js_lib/charisma/bower_components/chosen/chosen.min.css' rel='stylesheet'&gt;</div><div class="line">&lt;link href='../../other_js_lib/charisma/bower_components/colorbox/example3/colorbox.css' rel='stylesheet'&gt;</div><div class="line">&lt;link href='../../other_js_lib/charisma/bower_components/responsive-tables/responsive-tables.css' rel='stylesheet'&gt;</div><div class="line">&lt;link href='../../other_js_lib/charisma/bower_components/bootstrap-tour/build/css/bootstrap-tour.min.css' rel='stylesheet'&gt;</div><div class="line">&lt;link href='../../other_js_lib/charisma/css/jquery.noty.css' rel='stylesheet'&gt;</div><div class="line">&lt;link href='../../other_js_lib/charisma/css/noty_theme_default.css' rel='stylesheet'&gt;</div><div class="line">&lt;link href='../../other_js_lib/charisma/css/elfinder.min.css' rel='stylesheet'&gt;</div><div class="line">&lt;link href='../../other_js_lib/charisma/css/elfinder.theme.css' rel='stylesheet'&gt;</div><div class="line">&lt;link href='../../other_js_lib/charisma/css/jquery.iphone.toggle.css' rel='stylesheet'&gt;</div><div class="line">&lt;link href='../../other_js_lib/charisma/css/uploadify.css' rel='stylesheet'&gt;</div><div class="line">&lt;link href='../../other_js_lib/charisma/css/animate.min.css' rel='stylesheet'&gt;</div><div class="line"></div><div class="line">// html中大量引用js的部分</div><div class="line">&lt;!-- select or dropdown enhancer --&gt;</div><div class="line">&lt;script src="../../other_js_lib/charisma/bower_components/chosen/chosen.jquery.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;!-- plugin for gallery image view --&gt;</div><div class="line">&lt;script src="../../other_js_lib/charisma/bower_components/colorbox/jquery.colorbox-min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;!-- notification plugin --&gt;</div><div class="line">&lt;script src="../../other_js_lib/charisma/js/jquery.noty.js"&gt;&lt;/script&gt;</div><div class="line">&lt;!-- library for making tables responsive --&gt;</div><div class="line">&lt;script src="../../other_js_lib/charisma/bower_components/responsive-tables/responsive-tables.js"&gt;&lt;/script&gt;</div><div class="line">&lt;!-- tour plugin --&gt;</div><div class="line">&lt;script src="../../other_js_lib/charisma/bower_components/bootstrap-tour/build/js/bootstrap-tour.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;!-- star rating plugin --&gt;</div><div class="line">&lt;script src="../../other_js_lib/charisma/js/jquery.raty.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;!-- for iOS style toggle switch --&gt;</div><div class="line">&lt;script src="../../other_js_lib/charisma/js/jquery.iphone.toggle.js"&gt;&lt;/script&gt;</div><div class="line">&lt;!-- autogrowing textarea plugin --&gt;</div><div class="line">&lt;script src="../../other_js_lib/charisma/js/jquery.autogrow-textarea.js"&gt;&lt;/script&gt;</div><div class="line">&lt;!-- multiple file upload plugin --&gt;</div><div class="line">&lt;script src="../../other_js_lib/charisma/js/jquery.uploadify-3.1.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;!-- history.js for cross-browser state change on ajax --&gt;</div><div class="line">&lt;script src="../../other_js_lib/charisma/js/jquery.history.js"&gt;&lt;/script&gt;</div><div class="line">&lt;!-- application script for Charisma demo --&gt;</div><div class="line">&lt;script src="../../other_js_lib/charisma/js/charisma.js"&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></li><li><p>html过多，每个一个界面就会有一个html页面<br> <img src="/2016/12/30/Robot框架-Nodejs+Express+React+MaterialUI/robot1html数量.png" alt=""></p></li><li>React界面大的方向使用的是Component开发模式，但每个组件内，还是大最使用最原生的方式开发，下面是其中一个组件的render()方法内部代码：<br> <img src="/2016/12/30/Robot框架-Nodejs+Express+React+MaterialUI/robot1render方法.png" alt=""></li><li>界面很不好，由于css与js逻辑代码分离，在没有缓存时，经常出现先看到没有样式的界面，再看到整体界面，整体视觉效果很不好</li><li>使用的是browserify的express的中间件：browserify-middleware，虽然能解决开发期间每次执行手动执行转换的功能，但问题是修改界面后，每次都手动需新才行。</li><li>没有适配移动端，在手机版本上的体验很差</li><li>还有很多其他的，都是由上面的问题衍生出来的</li></ol><h1 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h1><p>为了解决上面的问题，花了几天时间进行调研，主要的调研点：</p><ol><li>browserify是否可以对css进行模块化支持？<br> 结论：webpack更加合适</li><li>webpack的使用，有没有类似browserify-middleware功能？<br> 结论：webpack-dev-server</li><li>双服务器配置：nodejs+express与webpack-dev-server的理解与如何工作？<br> 结论：思维需要变化，下面会具体介绍  </li><li>React的UI库：<a href="http://www.material-ui.com/#/" target="_blank" rel="noopener">Material-UI</a>的使用？<br> 结论：官网demo例子只有基本组件的使用，学了后，还是无法创造出想要的效果</li></ol><h1 id="Robot最新框架"><a href="#Robot最新框架" class="headerlink" title="Robot最新框架"></a>Robot最新框架</h1><h2 id="技术集"><a href="#技术集" class="headerlink" title="技术集"></a>技术集</h2><ol><li>后端：<ol><li>Nodejs<ol><li>nodemon</li></ol></li><li>Express</li></ol></li><li>前端:<ol><li>React<ol><li>react-router</li></ol></li><li>Material-UI<ol><li>react-tap-event-plugin</li></ol></li></ol></li><li>打包工具：<ol><li>webpack<ol><li>style-loader</li><li>babel-loader</li><li>webpack-dev-server</li></ol></li><li>babel<ol><li>babel-preset-es2015</li><li>babel-preset-react</li><li>babel-preset-stage-1</li></ol></li></ol></li></ol><h2 id="框架目录结构"><a href="#框架目录结构" class="headerlink" title="框架目录结构"></a>框架目录结构</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/12/30/Robot框架-Nodejs+Express+React+MaterialUI/robot目录.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="框架界面"><a href="#框架界面" class="headerlink" title="框架界面"></a>框架界面</h2><iframe height="300" width="100%" src="robot界面视频.mp4" frameborder="0" allowfullscreen></iframe><h2 id="具体技术点"><a href="#具体技术点" class="headerlink" title="具体技术点"></a>具体技术点</h2><h3 id="后端Server"><a href="#后端Server" class="headerlink" title="后端Server"></a>后端Server</h3><ol><li>使用nodejs+express创建后台服务。网上很多教程</li><li><p>关键点：</p><ol><li><p>server端的日志输出，把所有请求都通过日志输出</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过使用给express里添加morgan，就可以实现</span></div><div class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">app.use(logger(<span class="string">'dev'</span>));</div></pre></td></tr></table></figure></li><li><p>实现Server的404异常，利用express的中间件机制原理，实现404找不到页面异常<br> <img src="/2016/12/30/Robot框架-Nodejs+Express+React+MaterialUI/express中间件.png" alt=""></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 工具中间件</span></div><div class="line">app.use(logger(<span class="string">'dev'</span>));</div><div class="line">app.use(bodyParser.json());</div><div class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</div><div class="line">app.use(cookieParser());</div><div class="line"></div><div class="line"><span class="comment">// 业务中间件</span></div><div class="line">app.use(<span class="string">'/'</span>, index);</div><div class="line">app.use(<span class="string">'/users'</span>, users);</div><div class="line"></div><div class="line"><span class="comment">// catch 404 and forward to error handler</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Not Found'</span>);</div><div class="line">  err.status = <span class="number">404</span>;</div><div class="line">  next(err);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// error handler</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</div><div class="line">  <span class="comment">// set locals, only providing error in development</span></div><div class="line">  res.locals.message = err.message;</div><div class="line">  res.locals.error = req.app.get(<span class="string">'env'</span>) === <span class="string">'development'</span> ? err : &#123;&#125;;</div><div class="line"></div><div class="line">  <span class="comment">// render the error page</span></div><div class="line">  res.status(err.status || <span class="number">500</span>);</div><div class="line">  res.render(<span class="string">'error'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p><a href="https://nodemon.io/" target="_blank" rel="noopener">nodemon</a>实现改动server端代码后，实现自动重新加载</p></li></ol></li></ol><h3 id="webpack打包配置"><a href="#webpack打包配置" class="headerlink" title="webpack打包配置"></a>webpack打包配置</h3><h4 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h4><p>在写React模块时，为了更加方便编写，使用了一些高级特性： </p><ol><li><p>ES6语法</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// es6的模块化引入</span></div><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="comment">// es6的类定义</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 模块化导出</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> XXX;</div></pre></td></tr></table></figure></li><li><p>JSX标记</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> (</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">);</div></pre></td></tr></table></figure></li><li><p>class类的成员变量定义</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意：在es6的规范中，并不支持成员变量，static变量直接在class里定义，只能如下定义</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"><span class="keyword">constructor</span>()&#123;</div><div class="line"><span class="keyword">this</span>.state = &#123;</div><div class="line"><span class="attr">navDrawerOpen</span>: <span class="literal">false</span></div><div class="line">&#125;;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 但我们希望使用下面的语法规则</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">state = &#123;</div><div class="line"><span class="attr">navDrawerOpen</span>: <span class="literal">false</span></div><div class="line">&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>上面的高级特性，现在主流的浏览器都还不支持，为了使用，我们就需要进行转换：</p><ol><li>webpack<ul><li>bable-loader // 用于加载babel<ul><li>bable<ul><li>babel-preset-es2015 // 转换es6语法</li><li>babel-preset-react // 转换jsx语法</li><li>babel-preset-stage-1 // 转换成员变量语法</li></ul></li></ul></li></ul></li></ol><h4 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h4><ol><li>通过自己搭后台服务与webpack的watch来实现 <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/12/30/Robot框架-Nodejs+Express+React+MaterialUI/webpack开发方式一.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>webpack-dev-server，HotModuleReplacementPlugin实现热更新 — 推荐方式<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/12/30/Robot框架-Nodejs+Express+React+MaterialUI/webpack开发方式二.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p>webpack-dev-server.config.js的具体配置(<a href="https://webpack.github.io/docs/webpack-dev-server.html" target="_blank" rel="noopener">webpack-dev-server配置</a>)：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="comment">// 开发期间把www做为了输出目录，不与正式环境情况发生冲突</span></div><div class="line"><span class="keyword">const</span> buildPath = path.resolve(__dirname, <span class="string">'src/www'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: [</div><div class="line">        <span class="string">'webpack/hot/dev-server'</span>, <span class="comment">// 热修复配置，这个需要一起合并到app.js里</span></div><div class="line">        path.resolve(__dirname, <span class="string">'src/app/app.js'</span>) <span class="comment">// app的入口</span></div><div class="line">    ],</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">path</span>: buildPath,</div><div class="line">        <span class="attr">filename</span>: <span class="string">'app.js'</span></div><div class="line">        <span class="comment">//publicPath: buildPath // 不用特别指定publicPath路径</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 这个是webpack-dev-server的运行参数</span></div><div class="line">    devServer: &#123;</div><div class="line">        <span class="attr">contentBase</span>: path.resolve(__dirname, <span class="string">'src/www'</span>),</div><div class="line">        <span class="attr">hot</span>:<span class="literal">true</span>, <span class="comment">// 热修复</span></div><div class="line">        inline: <span class="literal">true</span>, <span class="comment">// 使用热修复，必须是inline模式</span></div><div class="line">        port: <span class="number">8080</span> <span class="comment">// 创建的服务器的port，自由配置</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">resolve</span>: &#123;</div><div class="line">        <span class="attr">extensions</span>: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>, <span class="string">'.css'</span>, <span class="string">'.json'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">plugins</span>: [</div><div class="line">        <span class="comment">// 让webpack-dev-server支持热更新</span></div><div class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</div><div class="line">    ],</div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">'babel-loader'</span>,</div><div class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">                <span class="attr">query</span>: &#123;</div><div class="line">                    <span class="string">"presets"</span>: [</div><div class="line">                        <span class="string">"react"</span>, <span class="comment">// 为了支持jsx的语法</span></div><div class="line">                        <span class="string">"es2015"</span>, <span class="comment">// 为了支持es6的语法</span></div><div class="line">                        <span class="string">"stage-1"</span> <span class="comment">// 为了支持class的成员变量与静态变量</span></div><div class="line">                    ]</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">'style-loader!css-loader'</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>通过下面命令运行webpack-dev-server，开发环境配置完成，即可实现修改了js文件后，主动推送更新浏览器</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 先在package.json里配置</div><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">&quot;start&quot;: &quot;nodemon ./bin/www&quot;,</div><div class="line">&quot;browser:development&quot;: &quot;webpack-dev-server --config client/webpack-dev-server.config.js --progress --colors --inline&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 命令行里运行</div><div class="line">npm run browser:development</div></pre></td></tr></table></figure></li><li><p>通过这种方式启动的webpack-dev-server后，通过ctrl-z能停掉服务，但无法释放所占用的8080端口号，需求如下操作，kill掉此端口的占用，才能再次启动。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 查找端口被哪些服务占用</div><div class="line">lsof -i:8080</div><div class="line">// kill掉此进程</div><div class="line">kill -9 进程pid</div></pre></td></tr></table></figure></li></ol><h3 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h3><h4 id="基于React的开发思路变化"><a href="#基于React的开发思路变化" class="headerlink" title="基于React的开发思路变化"></a>基于React的开发思路变化</h4><p><strong>传统开发模式：</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/12/30/Robot框架-Nodejs+Express+React+MaterialUI/传统开发模式.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p><strong>React开发模式：</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/12/30/Robot框架-Nodejs+Express+React+MaterialUI/React开发模式.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="app前端入口"><a href="#app前端入口" class="headerlink" title="app前端入口"></a>app前端入口</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> injectTapEventPlugin <span class="keyword">from</span> <span class="string">'react-tap-event-plugin'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;Router, browserHistory&#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</div><div class="line"><span class="keyword">import</span> &#123;createHashHistory&#125; <span class="keyword">from</span> <span class="string">'history'</span>;</div><div class="line"><span class="keyword">import</span> AppRoutes <span class="keyword">from</span> <span class="string">'./AppRoutes.js'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Needed for onTouchTap</span></div><div class="line"><span class="comment">// http://stackoverflow.com/a/34015469/988941</span></div><div class="line">injectTapEventPlugin();</div><div class="line"></div><div class="line"><span class="comment">// &#123;/*没有弄懂这两个配置参数*/&#125;</span></div><div class="line">render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Router</span></span></span></div><div class="line">        <span class="attr">history</span>=<span class="string">&#123;browserHistory&#125;</span></div><div class="line">        <span class="attr">onUpdate</span>=<span class="string">&#123;()</span> =&gt; window.scrollTo(0, 0)&#125;</div><div class="line">        &gt;</div><div class="line">        &#123;AppRoutes&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span>,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</div><div class="line">);</div></pre></td></tr></table></figure><p>app的入口职责很简单：</p><ol><li>路由配置</li><li>通用处理，如material-ui库里的事件初始化：injectTapEventPlugin();</li></ol><p>app的此入口相当于Android里的Application</p><h4 id="app的前端路由"><a href="#app的前端路由" class="headerlink" title="app的前端路由"></a>app的前端路由</h4><p>在android里，一个界面跳转到另外的界面，是通过协议intent与startActivity()方法来实现跳转，其中的核心实现是由系统自己封装掉了</p><p>在前端，界面之前跳转的协议都是URL，再通过window.location.href重新向server请求并加载新页面。</p><p>在React的模式下，跳转协议也是URL，但这个URL不用经过server请求，而是重新加载新模块实现，如下图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/12/30/Robot框架-Nodejs+Express+React+MaterialUI/路由效果.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>要想实现此效果，不使用React-Router开源框架，我们的写法为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> About = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里将会出现N多介绍文字balabala<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  );&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> blogs = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>blogs<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"＃"</span>&gt;</span>文章A<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"＃"</span>&gt;</span>文章B<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"＃"</span>&gt;</span>文章C<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"＃"</span>&gt;</span>文章D<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  );&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> Home = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是首页<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  );&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> App = React.createClass(&#123;</div><div class="line">  render () &#123;</div><div class="line">    <span class="keyword">var</span> Child;</div><div class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>.props.route) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'about'</span>: Child = About; <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'blogs'</span>: Child = blogs; <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">default</span>:      Child = Home;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Child</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> route = <span class="built_in">window</span>.location.hash.substr(<span class="number">1</span>);</div><div class="line">  React.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> <span class="attr">route</span>=<span class="string">&#123;route&#125;</span> /&gt;</span>, document.body);</span></div><div class="line">&#125;</div><div class="line">window.addEventListener('hashchange', render);</div><div class="line">render();</div></pre></td></tr></table></figure><p>这样实现，也比较容易，但当我们要进行复杂的路由时，就会变的非常麻烦了，所以我们需要使用<a href="https://github.com/ReactTraining/react-router/" target="_blank" rel="noopener">react-router</a>。</p><p>我们的路由配置AppRoutes.js的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;Route, IndexRoute&#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Master <span class="keyword">from</span> <span class="string">'./components/Master'</span></div><div class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/pages/Home'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> AppRouters = (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;Master&#125;</span>&gt;</span> // 其Master为整体框架</span></div><div class="line">        <span class="tag">&lt;<span class="name">IndexRoute</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span> // Home表示首页，注意是：嵌入到框架里的部份</div><div class="line">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></div><div class="line">);</div><div class="line"></div><div class="line">export default AppRouters;</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/12/30/Robot框架-Nodejs+Express+React+MaterialUI/React的框架.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>更多配置请点击：<a href="https://github.com/ReactTraining/react-router/blob/master/docs/guides/RouteConfiguration.md" target="_blank" rel="noopener">ReactRouteConfig</a></p><h4 id="Master-js框架的实现"><a href="#Master-js框架的实现" class="headerlink" title="Master.js框架的实现"></a>Master.js框架的实现</h4><h5 id="Material-UI理解-官网"><a href="#Material-UI理解-官网" class="headerlink" title="Material-UI理解 官网"></a>Material-UI理解 <a href="http://www.material-ui.com/#/" target="_blank" rel="noopener">官网</a></h5><ol><li>Material-UI提供了一套组件库。<a href="http://www.material-ui.com/#/components/app-bar" target="_blank" rel="noopener">具体请点击</a></li><li>Material-UI还提供了一套样式主题库，颜色库。<a href="http://www.material-ui.com/#/customization/themes" target="_blank" rel="noopener">具体请点击</a></li></ol><h5 id="Material-UI作用"><a href="#Material-UI作用" class="headerlink" title="Material-UI作用"></a>Material-UI作用</h5><ol><li>使用其提供的组件，可以开发出与Android原生的Design设计库一致的效果</li><li>使用其样式及主题，统一所有的控件与界面的风格，方便统一风格切换</li><li>能方便PC，App的适配，提供的控件及源码里有适配的解决方案</li><li>对React-Native而言，方便统一PC，M，Android，Ios四端的风格样式</li></ol><h5 id="Master-js代码分析"><a href="#Master-js代码分析" class="headerlink" title="Master.js代码分析"></a>Master.js代码分析</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 使用Material-UI的控件</span></div><div class="line"><span class="keyword">import</span> &#123;AppBar, MuiThemeProvider&#125; <span class="keyword">from</span> <span class="string">'material-ui'</span>;</div><div class="line"><span class="comment">// 使用Material-UI的样式主题</span></div><div class="line"><span class="keyword">import</span> &#123;getMuiTheme, colors, spacing&#125; <span class="keyword">from</span> <span class="string">'material-ui/styles'</span>;</div><div class="line"><span class="comment">// 使用Material-UI对屏幕适配</span></div><div class="line"><span class="keyword">import</span> withWidth, &#123;MEDIUM, LARGE&#125; <span class="keyword">from</span> <span class="string">'material-ui/utils/withWidth'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 封装的抽屉Drawer</span></div><div class="line"><span class="keyword">import</span> AppNavDrawer <span class="keyword">from</span> <span class="string">'./AppNavDrawer.js'</span>;</div><div class="line"><span class="comment">// 用于对屏暮大小适配的包装模块</span></div><div class="line"><span class="keyword">import</span> FullWidthSection <span class="keyword">from</span> <span class="string">'./FullWidthSection.js'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Material-UI主题</span></div><div class="line"><span class="keyword">const</span> muiTheme = getMuiTheme();</div><div class="line"><span class="comment">// 此框架页面的一些特殊样式，即样式主题无法满足的自定义部分</span></div><div class="line"><span class="keyword">const</span> styles = &#123;</div><div class="line">    <span class="attr">appBar</span>: &#123;</div><div class="line">        <span class="attr">position</span>: <span class="string">'fixed'</span>,</div><div class="line">        <span class="comment">// Needed to overlap t  he examples</span></div><div class="line">        zIndex: muiTheme.zIndex.appBar + <span class="number">1</span>,</div><div class="line">        <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">right</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">root</span>: &#123;</div><div class="line">        <span class="attr">paddingTop</span>: spacing.desktopKeylineIncrement,</div><div class="line">        <span class="attr">minHeight</span>: <span class="number">400</span>,</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">content</span>: &#123;</div><div class="line">        <span class="attr">margin</span>: spacing.desktopGutter,</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">footer</span>: &#123;</div><div class="line">        <span class="attr">backgroundColor</span>: colors.grey900,</div><div class="line">        <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">        <span class="attr">position</span>: <span class="string">'fixed'</span>,</div><div class="line">        <span class="attr">left</span>:<span class="number">0</span>, <span class="attr">right</span>:<span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">p</span>: &#123;</div><div class="line">        <span class="attr">margin</span>: <span class="string">'0 auto'</span>,</div><div class="line">        <span class="attr">padding</span>: <span class="number">0</span>,</div><div class="line">        <span class="attr">color</span>: colors.lightWhite,</div><div class="line">        <span class="attr">maxWidth</span>: <span class="number">356</span>,</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">p2</span>: &#123;</div><div class="line">        <span class="attr">margin</span>: <span class="string">'0 auto'</span>,</div><div class="line">        <span class="attr">padding</span>: <span class="number">0</span>,</div><div class="line">        <span class="attr">paddingTop</span>: <span class="string">'5px'</span>,</div><div class="line">        <span class="attr">color</span>: colors.red800,</div><div class="line">        <span class="attr">maxWidth</span>: <span class="number">356</span>,</div><div class="line">    &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="comment">// React控件的state初始值</span></div><div class="line">    <span class="comment">// 所有的界面变化，都应该通过state来控件，而不是直接操作对应的dom元素</span></div><div class="line">    state = &#123;</div><div class="line">        <span class="attr">navDrawerOpen</span>: <span class="literal">false</span> <span class="comment">// 表明抽屉默认是关闭的</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 处理Drawer的状态变化</span></div><div class="line">    handleChangeRequestNavDrawer = <span class="function">(<span class="params">open</span>)=&gt;</span> &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            <span class="attr">navDrawerOpen</span>: open</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 成员变量，用于处理AppBar左边图片点击事件</span></div><div class="line">    handleTouchTapLeftIconButton = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            <span class="attr">navDrawerOpen</span>: !<span class="keyword">this</span>.state.navDrawerOpen</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 框架界面</span></div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;MuiThemeProvider&gt; // 这个是使用Material-UI必须要添加的，用于提供Material-UI主题样式</div><div class="line">                &lt;div&gt;</div><div class="line">                    &lt;AppBar</div><div class="line">                        onLeftIconButtonTouchTap=&#123;this.handleTouchTapLeftIconButton&#125;</div><div class="line">                        title="Robot"</div><div class="line">                        style=&#123;styles.appBar&#125;/&gt;</div><div class="line">// 子素元位置</div><div class="line">                    &#123;</div><div class="line">                        &lt;div style=&#123;muiTheme.prepareStyles(styles.root)&#125;&gt;</div><div class="line">                            &lt;div style=&#123;muiTheme.prepareStyles(styles.content)&#125;&gt;</div><div class="line">                                &#123;this.props.children&#125;</div><div class="line">                            &lt;/div&gt;</div><div class="line">                        &lt;/div&gt;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    &lt;AppNavDrawer</div><div class="line">                        onRequestChangeNavDrawer=&#123;this.handleChangeRequestNavDrawer&#125;</div><div class="line">                        open=&#123;this.state.navDrawerOpen&#125;/&gt;</div><div class="line">// 用于适配屏幕宽度的</div><div class="line">                    &lt;FullWidthSection style=&#123;styles.footer&#125;&gt;</div><div class="line">                        &lt;p style=&#123;muiTheme.prepareStyles(styles.p)&#125;&gt;</div><div class="line">                            &#123;'58同城-用户增长部-无线技术部 '&#125;</div><div class="line">                        &lt;/p&gt;</div><div class="line">                        &lt;p style=&#123;muiTheme.prepareStyles(styles.p2)&#125;&gt;</div><div class="line">                            &#123;' Android组 '&#125;</div><div class="line">                        &lt;/p&gt;</div><div class="line">                    &lt;/FullWidthSection&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/MuiThemeProvider&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default withWidth()(Master);</div></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://github.com/ReactTraining/react-router/" target="_blank" rel="noopener">React-Router</a></li><li><a href="http://www.cnblogs.com/Leo_wl/p/4780758.html" target="_blank" rel="noopener">React 实践记录 03 React router</a></li><li><a href="https://webpack.github.io/docs/webpack-dev-server.html" target="_blank" rel="noopener">webpack</a></li><li><a href="http://www.material-ui.com/#/" target="_blank" rel="noopener">material-ui</a></li><li><a href="http://expressjs.com/en/4x/api.html#app.use" target="_blank" rel="noopener">express</a></li><li><a href="https://nighca.me/2015/12/29/Static-Properties-in-ES-Class/" target="_blank" rel="noopener">Static Properties in ES Class</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;上次给大家介绍Robot平台框架，其特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由nodejs+express+react+bootstrap实现&lt;/
      
    
    </summary>
    
      <category term="前端" scheme="https://handsomeliuyang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://handsomeliuyang.github.io/tags/React/"/>
    
      <category term="Robot" scheme="https://handsomeliuyang.github.io/tags/Robot/"/>
    
      <category term="nodejs" scheme="https://handsomeliuyang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>React实现MergeRequest管理</title>
    <link href="https://handsomeliuyang.github.io/2016/11/15/React%E5%AE%9E%E7%8E%B0MergeRequest%E7%AE%A1%E7%90%86/"/>
    <id>https://handsomeliuyang.github.io/2016/11/15/React实现MergeRequest管理/</id>
    <published>2016-11-15T11:33:06.000Z</published>
    <updated>2017-01-05T02:45:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是React"><a href="#什么是React" class="headerlink" title="什么是React"></a>什么是React</h2><p>React是一个前端框架，与其类似的有vue、angular 2.x等等。改变前端开发模式，让前端开发更加方便，让前端也使用面向对象的方案来开发。相关的一些特点可以看其官方文档</p><h2 id="ES6-JSX"><a href="#ES6-JSX" class="headerlink" title="ES6,JSX"></a>ES6,JSX</h2><p>JavaScript是一个统称，其标准的名称为：<strong>ECMAScript</strong>。ES6, ES5是两个不同的标准，现在的主流浏览器都完全支持<strong>ES5</strong>的语法，不支持最新标准<strong>ES6</strong>。ES6有很多的新特性，更适合面向对象的开发模式，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//es5</span></div><div class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</div><div class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;&lt;/&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">module.exports = MyComponent;</div><div class="line">//es6</div><div class="line">class MyComponent extends React.Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;div&gt;&lt;/&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">export MyComponent Apply;</div></pre></td></tr></table></figure><p>ES6才支持模块化，ES5不支持，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</div><div class="line">);</div></pre></td></tr></table></figure><p>为了更方便开发及代码可读性，React里引入了模板语法：JSX，对比如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// 使用JSX的写法</div><div class="line">class Hello extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;div&gt;Hello &#123;this.props.toWhat&#125;&lt;/div&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;Hello toWhat=&quot;World&quot; /&gt;,</div><div class="line">  document.getElementById(&apos;root&apos;)</div><div class="line">);</div><div class="line"></div><div class="line">// 使用原生的Javascript的写法，注意同时使用了ES6</div><div class="line">class Hello extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return React.createElement(&apos;div&apos;, null, `Hello $&#123;this.props.toWhat&#125;`);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  React.createElement(Hello, &#123;toWhat: &apos;World&apos;&#125;, null),</div><div class="line">  document.getElementById(&apos;root&apos;)</div><div class="line">);</div></pre></td></tr></table></figure><p>ES6，JSX原生浏览器都不支持，就需要进行预编译（即转码）。React推荐使用Babel</p><blockquote><p>Babel是一个javascript的转换器，类似于gradle一样，支持各种插件。</p><p>FaceBook开发了一个用于转换JSX的Babel插件：babel-preset-react。</p><p>转换ES6的Babel插件为：babel-preset-es2015</p><p>更多请点周：<a href="https://babeljs.io/" target="_blank" rel="noopener">Babel官网</a></p></blockquote><p>为了让浏览器能运行React的代码，有两种方案：</p><p>一：实时编译，即让浏览器来编译，配置很简单，如下所示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure><p>特点：这种方式为浏览器编译，因为实时编译会很慢，所以适合代码量比较小的</p><p>二：本地编译，即在Server端或本地提前编译好，这样就需要使用打包工具：browserify或webpack，React推荐使用Browserify（<a href="http://browserify.org/" target="_blank" rel="noopener">browserify官网</a>）。下面使用的是延时方案，即用户访问资源时，才进行转换，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> browserify = <span class="built_in">require</span>(<span class="string">'browserify-middleware'</span>);</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"></div><div class="line"><span class="comment">// 把Browserify的环境切换为正式环境，其配置如下：</span></div><div class="line"><span class="comment">/*process.env.NODE_ENV = 'production';</span></div><div class="line">browserify.settings.mode = 'production';*/</div><div class="line"></div><div class="line"><span class="keyword">var</span> shared = [<span class="string">'react'</span>, <span class="string">'react-dom'</span>];</div><div class="line">router.get(<span class="string">'/react/base_bundle.js'</span>, browserify(shared));</div><div class="line"></div><div class="line"><span class="comment">// 为了不总是配置，直接进行环境配置</span></div><div class="line">browserify.settings.external = shared;</div><div class="line">browserify.settings.transform = <span class="string">'babelify'</span>;</div><div class="line"></div><div class="line">router.get(<span class="string">'/react/app_bundle.js'</span>, browserify(<span class="string">'client/merge_manager/app.js'</span>));</div></pre></td></tr></table></figure><p>特点：方便，不用手动转换，除代码变动后的首次访问慢之外，没有性能问题，浏览器也不用转换运行</p><h2 id="JSX的属性与Html的属性"><a href="#JSX的属性与Html的属性" class="headerlink" title="JSX的属性与Html的属性"></a>JSX的属性与Html的属性</h2><p>JSX是一个模块语法，是为了代码的可读性，但与html并不完全一样，其中最大的区别，有如下几点：</p><p>1.JSX支持表达式，但只支持一个表达式，不支持代码块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 直接访问变量</span></div><div class="line">&lt;img src=&#123;user.avatarUrl&#125; /&gt;</div><div class="line">&lt;img src=&#123;'http://www.58.com' + '/a.png'&#125; /&gt;</div><div class="line"></div><div class="line">// 循环</div><div class="line">const todos = ['finish doc', 'submit pr', 'nag dan to review'];</div><div class="line">return (</div><div class="line">&lt;ul&gt;</div><div class="line">  &#123;todos.map((message) =&gt; &lt;Item key=&#123;message&#125; message=&#123;message&#125; /&gt;)&#125;</div><div class="line">&lt;/ul&gt;</div><div class="line">);</div></pre></td></tr></table></figure><p>2.class属性由于是ES6里的关键字，所以需要使用className，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div className=<span class="string">"button"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure><p>3.html的属性的命名都是小写，但JSX里的属性都是驼峰命名法，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div className=<span class="string">"xxx"</span> tabIndex=<span class="string">"xxx"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure><p>4.样式style，JSX把style当作字典对象来处理的，不能当字符来处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&#123;&#123;<span class="attr">color</span>:<span class="string">'blue'</span>, <span class="attr">backgroundImage</span>:<span class="string">'xxx'</span>&#125;&#125;&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>javascript的ES5是不支持模块的，即类不能分文件，即不能运行如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// CommonJs，nodejs才支持</div><div class="line">var React = require(&apos;react&apos;);</div><div class="line">var ReactDOM = require(&apos;react-dom&apos;);</div><div class="line">var TopBar = require(&apos;../common/header.js&apos;);</div><div class="line">var SideBar = require(&apos;../common/sidebar_nav.js&apos;);</div><div class="line">var Footer = require(&apos;../common/footer.js&apos;);</div><div class="line"></div><div class="line">// ES6才支持，ES5不支持</div><div class="line">import React from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;;</div></pre></td></tr></table></figure><p>由于运行前，会使用Babel进行转换，所以React开发时，可以支持模块化，即可以使用Nodejs支持的CommonJs，也可以使用ES6的import模式。React推荐使用CommonJs的方式。</p><h2 id="React与传统html开发思想对比"><a href="#React与传统html开发思想对比" class="headerlink" title="React与传统html开发思想对比"></a>React与传统html开发思想对比</h2><h3 id="传统开发"><a href="#传统开发" class="headerlink" title="传统开发"></a>传统开发</h3><p>html为界面，js为逻辑，分开开发，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">// js代码</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>模板语言：<a href="http://www.embeddedjs.com/" target="_blank" rel="noopener">EJS</a>。为了插件业务数据，实现业务后台的MVC</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">locals.username</span>) &#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/login"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">locals.username</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&lt;<span class="regexp">/body&gt;</span></div></pre></td></tr></table></figure><h3 id="React开发"><a href="#React开发" class="headerlink" title="React开发"></a>React开发</h3><p>基于组件，一个控件的界面与逻辑都在一起，控件可以复用，与Native的开发模式比较类似，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 组件已经与Dom上绑定完了</span></div><div class="line">  componentDidMount() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 组件与Dom解绑</span></div><div class="line">  componentWillUnmount() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>上面使用的是ES6的语法，与Android的Fragment比较像，界面与业务逻辑都在此类里完成</li><li>上面的方法为React组件的生命周期方法</li></ol><p>数据的获取方式：与传统方式不一样，而是通过Ajax来请求，与Native开发一下，界面与Service只通过接口来交互，但没有使用Server端的模板语言EJS</p><h2 id="React的生命周期"><a href="#React的生命周期" class="headerlink" title="React的生命周期"></a>React的生命周期</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/11/15/React实现MergeRequest管理/React生命周期.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>关键点：</p><p>1.我们开发的Api就是这些生命周期方法</p><p>2.this.props.xx，this.state.xx是两个数据相关的对象，共中props对象只读，而state是可以修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;SideBar activeKey=<span class="string">'merge_manager'</span> /&gt; <span class="comment">// 只能通过这种方式修改props</span></div><div class="line"></div><div class="line"><span class="keyword">this</span>.setState(xxx) <span class="comment">// 修改State数据，组件并进行刷新</span></div></pre></td></tr></table></figure><p>3.在组件绑定到Dom里后，就可以通过jquery的方法，可以获取组件的dom元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">'#target-branch-select'</span>).chosen(&#123;<span class="attr">width</span>: <span class="string">"100%"</span>&#125;);</div><div class="line">   $(<span class="string">'#assignee-select'</span>).chosen(&#123;<span class="attr">width</span>: <span class="string">"100%"</span>&#125;);</div><div class="line">   $(<span class="string">'#title-select'</span>).chosen(&#123;<span class="attr">width</span>: <span class="string">"100%"</span>&#125;);</div><div class="line">$(<span class="string">'#author-select'</span>).chosen(&#123;<span class="attr">width</span>: <span class="string">"100%"</span>&#125;);</div><div class="line">&#125;,</div></pre></td></tr></table></figure><h2 id="React的生命周期与Android的生命周期对比"><a href="#React的生命周期与Android的生命周期对比" class="headerlink" title="React的生命周期与Android的生命周期对比"></a>React的生命周期与Android的生命周期对比</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> InitEnvir = React.createClass(&#123;</div><div class="line"><span class="attr">render</span>: funcation()&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'render...'</span>);</div><div class="line"><span class="keyword">return</span> (</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">);</div><div class="line">&#125;,</div><div class="line"><span class="attr">componentDidMount</span>: funcation()&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'componentDidMount begin...'</span>);</div><div class="line"><span class="keyword">this</span>.setState(&#123;newData&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'componentDidMount end...'</span>);</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>上面代码的执行结果为：</p><table><thead><tr><th style="text-align:center">Android机制</th><th style="text-align:center">React机制</th></tr></thead><tbody><tr><td style="text-align:center">render…<br>componentDidMount begin…<br> componentDidMount end…<br> render…</td><td style="text-align:center">render…<br>componentDidMount begin…<br>render…<br>componentDidMount end…</td></tr></tbody></table><p>这个是Android机制与React机制最大的差别，Android的UI线程，有一个MainLoop队列。</p><h2 id="React实现页面框架"><a href="#React实现页面框架" class="headerlink" title="React实现页面框架"></a>React实现页面框架</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/11/15/React实现MergeRequest管理/MergeRequest.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="DataTables框架"><a href="#DataTables框架" class="headerlink" title="DataTables框架"></a>DataTables框架</h2><p>表格数据使用的是DataTables组件(<a href="https://datatables.net/" target="_blank" rel="noopener">datatables官网</a>)</p><p>由于数据量不大，使用的是前端排序，查询，过滤。数据量尽量不要超过1000。如果对于大数据，就需要Server进行配合</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://facebook.github.io/react/docs/hello-world.html" target="_blank" rel="noopener">React文档</a></li><li><a href="http://www.cnblogs.com/Mrs-cc/p/4969755.html" target="_blank" rel="noopener">React入门 (1)—使用指南（包括ES5和ES6对比）</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是React&quot;&gt;&lt;a href=&quot;#什么是React&quot; class=&quot;headerlink&quot; title=&quot;什么是React&quot;&gt;&lt;/a&gt;什么是React&lt;/h2&gt;&lt;p&gt;React是一个前端框架，与其类似的有vue、angular 2.x等等。改变前端开发模式，
      
    
    </summary>
    
      <category term="前端" scheme="https://handsomeliuyang.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://handsomeliuyang.github.io/tags/React/"/>
    
      <category term="Robot" scheme="https://handsomeliuyang.github.io/tags/Robot/"/>
    
      <category term="nodejs" scheme="https://handsomeliuyang.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Android内核学习笔记：Android进程\线程管理</title>
    <link href="https://handsomeliuyang.github.io/2016/08/13/Android%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9AAndroid%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>https://handsomeliuyang.github.io/2016/08/13/Android内核学习笔记：Android进程线程管理/</id>
    <published>2016-08-13T08:37:13.000Z</published>
    <updated>2016-08-14T04:42:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android程序启动过程"><a href="#Android程序启动过程" class="headerlink" title="Android程序启动过程"></a>Android程序启动过程</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/08/13/Android内核学习笔记：Android进程线程管理/Android程序的启动流程.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>ActivityManagerService与WindowManagerService在独立的进程里，与程序进度之间的通信通过Bindler进行</li><li>每个应用程序都是运行在独立的进程里的，进程与进程之间无法直接通信，每个进程里都一个JVM虚拟机，不能通过static进行通信</li><li>应用程序的进程是由ActivityManagerService通过Process.start(“android.app.ActivityThread”)创建的，进程创建后，会同时创建一个线程，这个线程就是我们所说的UIThread。</li><li>同一个进程里的Activity, Service等等四大组件都是运行在ActivityThread里，即UI线程里的。所以通常我们要在Service里创建一个Thread来真正执行后台程序</li><li>应用程序启动后，除了创建AcivityThread后，还会创建两个BindlerThread，作用就是用于与AMS，WMS进行交互的。</li></ol><h1 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h1><p><strong>Runnable是不是线程？</strong></p><p>不是，Runnable只是一个接口，用于创建线程的接口类</p><p><strong>Thread是不是线程？</strong></p><p>不是，Thread只有在调用thread.start()方法后，才会创建一个Thread出来，之前的所有的初始化步骤都是在当前线程里执行的。Thread.start()方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</div><div class="line">checkNotStarted();</div><div class="line">hasBeanStarted = <span class="keyword">true</span>;</div><div class="line">VMThread.create(<span class="keyword">this</span>, stackSize); <span class="comment">// 这里才是真正创建一个CPU线程的地方</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>只有当VMThread.create()方法之后，才会创建一个真正的线程。</p><h1 id="Android的UIThread"><a href="#Android的UIThread" class="headerlink" title="Android的UIThread"></a>Android的UIThread</h1><p>Android有四大组件：Activity，Service，ContentProvider，Broadcast。组各自的功能：</p><ol><li>Activity：界面，生命周期：onCreate(), …</li><li>Service：后台服务，生命周期：onCreate(), …</li><li>Broadcast：广播，生命周期：onReceive()</li><li>ContentProvider：用于数据共享，生命周期：onCreate(), …</li></ol><p><strong>四大组件的运行哪个进程，哪个线程里呢？</strong></p><ol><li>默认情况下：四大组件都是运行在以程序的包名命名的进程里，</li><li>四大组件都是运行在UIThread里，但注意：是其生命周期方法是运行在UIThread里。如ContentProvider的query()等等方法的执行线程要依调用方来决定</li><li>Service的生命周期是运行在UIThread里，我们需要执行的后台任务，需要创建一个子线程来执行</li><li>四大组件，Activity，Service，Broadcast都是需要时，系统进行创建，但ContentProvider例外，其是在应用进程启动时，就会开发创建。</li></ol><h1 id="Android的编程框架"><a href="#Android的编程框架" class="headerlink" title="Android的编程框架"></a>Android的编程框架</h1><p>从开始接触Android开始，我们都是面向四大组件及四大组件的生命周期方法来进行编程。<br>但学过C程序开发的都知道，应用程序都是从main()方法开始执行，再执行一个while()循环，不停接收事件，再处理事件的过程。<br>Android的事件驱动流程：<br><img src="/2016/08/13/Android内核学习笔记：Android进程线程管理/Android程序流程.png" alt=""></p><ol><li>由AMS创建应用程序进程，并创建UIThread，通过Looper.loop()，让UIThread进入事件驱动循环中</li><li>四大组件的生命周期方法，用户交互等等都当作Message，进入MessageQueue里，进入UIThread的事件驱动循环中。</li></ol><h1 id="ANR异常"><a href="#ANR异常" class="headerlink" title="ANR异常"></a>ANR异常</h1><p>概念：ANR（Application No Response）用户点击屏幕后，如果5s没有处理完成此点击Event，就会报ANR异常</p><p>ANR发生的情况：</p><ol><li>在UIThread里执行网络请求，IO操作等等耗时操作</li><li>UI绘制时间过长，也有可能造成ANR异常</li><li>ANR异常很多时候不是由一个耗时操作造成的，很多是由一组操作，如进行10000次SP读写操作。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android程序启动过程&quot;&gt;&lt;a href=&quot;#Android程序启动过程&quot; class=&quot;headerlink&quot; title=&quot;Android程序启动过程&quot;&gt;&lt;/a&gt;Android程序启动过程&lt;/h1&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
      
    
    </summary>
    
      <category term="Android" scheme="https://handsomeliuyang.github.io/categories/Android/"/>
    
    
      <category term="Android内核学习笔记" scheme="https://handsomeliuyang.github.io/tags/Android%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android签名的过程</title>
    <link href="https://handsomeliuyang.github.io/2016/06/13/2016-04-14-Android%E7%AD%BE%E5%90%8D%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>https://handsomeliuyang.github.io/2016/06/13/2016-04-14-Android签名的过程/</id>
    <published>2016-06-13T09:59:45.000Z</published>
    <updated>2016-08-13T08:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android对apk签名过程"><a href="#Android对apk签名过程" class="headerlink" title="Android对apk签名过程"></a>Android对apk签名过程</h1><p>Apk解压后的结构：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/06/13/2016-04-14-Android签名的过程/img_markdown/27.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>会生成一个META-INF的文件夹存放签名相关的数据：MANIFEST.MF WUBA_KEY.RSA WUBA_KEY.SF。此三个文件都是我们对unsigin.apk签名时生成的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/06/13/2016-04-14-Android签名的过程/img_markdown/28.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>SHA1：安全哈希算法，对于长度小于2^64位的消息，SHA1会产生一个160位的消息摘要。当接收到消息的时候，这个消息摘要可以用来验证数据的完整性。在传输的过程中，数据很可能会发生变化，那么这时候就会产生不同的消息摘要。SHA1有如下特性：不可以从消息摘要中复原信息；两个不同的消息不会产生同样的消息摘要。</li></ol><p>作用：</p><ol><li>完整性，签过名后的Apk无法进行增删改，不然其签名都会不一样</li><li>自我校验，因为签过名后的Apk里有公钥，可以对其Apk进行自我校验，所以只需要Apk文件，在Android系统里就可以完成Apk的校验</li><li>并行性，校验可以并行进行，WUBA_KEY.RSA对WUBA_KEY.SF的校验与WUBA_KEY.SF对MANIFEST.MF校验可以并行执行</li></ol><h1 id="Android系统签验证机制"><a href="#Android系统签验证机制" class="headerlink" title="Android系统签验证机制"></a>Android系统签验证机制</h1><p>系统验证流程刚好与签名过程相反：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/06/13/2016-04-14-Android签名的过程/img_markdown/29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="了解签名流程后，能做的事情"><a href="#了解签名流程后，能做的事情" class="headerlink" title="了解签名流程后，能做的事情"></a>了解签名流程后，能做的事情</h1><h2 id="打批量包"><a href="#打批量包" class="headerlink" title="打批量包"></a>打批量包</h2><p>为了区分不同的渠道用于统计分析，apk里需要内置携带一个渠道号，各种方式的比较：</p><table><thead><tr><th>位置</th><th>经历的过程</th><th>特点</th></tr></thead><tbody><tr><td>渠道号放在代码里</td><td>编译代码，编译res资源，编译Manifest文件，签名，生成Apk</td><td>非常慢，安全</td></tr><tr><td>放在res资源里</td><td>编译res资源，编译Manifest文件，签名，生成Apk</td><td>很慢，安全</td></tr><tr><td>放在AndroidManifest.xml文件里</td><td>编译Manifest文件，签名，生成Apk</td><td>慢，安全</td></tr><tr><td>放在asserts资源里</td><td>签名，生成Apk</td><td>快，安全</td></tr><tr><td>放在签名相关的META-INF文件夹里</td><td>生成Apk</td><td>非常快，不安全，可被修改</td></tr></tbody></table><h2 id="签名认证"><a href="#签名认证" class="headerlink" title="签名认证"></a>签名认证</h2><p>目的：防止apk被别人反编译，或者防止so文件被直接使用<br>方案：由于Apk里携带了公钥，可以在so里，进行公钥对比，判断当前执行环境是不是在Apk里面。</p><h1 id="Keystore文件生成过程"><a href="#Keystore文件生成过程" class="headerlink" title="Keystore文件生成过程"></a>Keystore文件生成过程</h1><p>由上面的签名过程得知，签名过程，需要有公钥和私钥，所以签名方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar signapk.jar testkey.x509.pem testkey.pk8 update.apk update_signed.apk</div></pre></td></tr></table></figure></p><ol><li>signapk.jar是Android源码包中的一个签名工具</li><li>通过signapk.jar这个可执行jar包，以“testkey.x509.pem”这个公钥文件和“testkey.pk8”这个私钥文件对“update.apk”进行签名，签名后的文件保存为“update_signed.apk”</li></ol><p>而对应用App，我们是使用java里的命令：jarsigner。使用jarsigner要先生成keystore文件，使用如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkey -v -keystore app.keystore -alias alias_name -keyalg RSA -validity 20000</div></pre></td></tr></table></figure></p><ol><li>-alias 后面跟的是别名这里是alias_name</li><li>-keyalg 是加密方式这里是RSA</li><li>-validity 是有效期这里是20000</li><li>-keystore 就是要生成的keystore的名称这里是app.keystore</li></ol><p>使用jarsigner对unsign.apk进行签名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jarsigner -verbose -keystore app.keystore -signedjar app_signed.apk app.apk alias_name</div></pre></td></tr></table></figure></p><ol><li>-keystore: keystore的名称</li><li>-signedjar  app_signed.apk: 指定签名后生成的APK名称</li><li>app.apk: 目标APK</li></ol><h1 id="修改Keystore的密码的影响"><a href="#修改Keystore的密码的影响" class="headerlink" title="修改Keystore的密码的影响"></a>修改Keystore的密码的影响</h1><p>使用keytool生成的keystore文件，我们称之为证书文件，里面存有用于签名apk的公钥及私钥，为了其安全，keystore有其自己本身的密码：</p><ol><li>storepass 指定密钥库的密码(获取keystore信息所需的密码)</li><li>keypass 指定别名条目的密码(私钥的密码，即加密私钥的密码)</li></ol><p>而我们可以修改keystore文件的storepass和keypass两种密码，都不影响对apk的签名，也不出现签名的apk不相同，因为keystore里面所包含的公钥和私钥是没有变化的。</p><p>keystore内部的信息是不会变化的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- XXX.Keystore的信息：</div><div class="line">    - Keystore 类型： JKS</div><div class="line">    - Keystore 提供者： SUN</div><div class="line">    - 您的 keystore 包含 1 输入</div><div class="line">    - 别名名称： XXXX</div><div class="line">    - 创建日期： XXXX</div><div class="line">    - 项类型: PrivateKeyEntry</div><div class="line">    - 认证链长度： 1</div><div class="line">    - 认证 [1]:</div><div class="line">    - 所有者:CN=XXX, OU=XXX, O=XXX, L=XXX, ST=XXX, C=XXX</div><div class="line">    - 签发人:CN=XXX, OU=XXX, O=XXX, L=XXX, ST=XXX, C=XXX</div><div class="line">    - 序列号:XXX</div><div class="line">    - 有效期: XXX</div><div class="line">    - 证书指纹:</div><div class="line">    -          MD5:XXX</div><div class="line">    -          SHA1:XXX</div><div class="line">    -          签名算法名称:SHA1withRSA</div><div class="line">    -          版本: 3</div></pre></td></tr></table></figure></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://www.docin.com/p-771857516.html" target="_blank" rel="noopener">Android系统代码签名验证机制的实现及安全性分析</a></li><li><a href="http://www.cnblogs.com/wanqieddy/p/3556060.html" target="_blank" rel="noopener">Android签名总结</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android对apk签名过程&quot;&gt;&lt;a href=&quot;#Android对apk签名过程&quot; class=&quot;headerlink&quot; title=&quot;Android对apk签名过程&quot;&gt;&lt;/a&gt;Android对apk签名过程&lt;/h1&gt;&lt;p&gt;Apk解压后的结构：&lt;br&gt;&lt;fig
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>58同城Hybrid框架的点点滴滴</title>
    <link href="https://handsomeliuyang.github.io/2016/03/24/2016-03-24-58%E5%90%8C%E5%9F%8EHybrid%E6%A1%86%E6%9E%B6%E7%9A%84%E7%82%B9%E7%82%B9%E6%BB%B4%E6%BB%B4/"/>
    <id>https://handsomeliuyang.github.io/2016/03/24/2016-03-24-58同城Hybrid框架的点点滴滴/</id>
    <published>2016-03-24T07:28:51.000Z</published>
    <updated>2016-08-13T08:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hybrid框架简介"><a href="#Hybrid框架简介" class="headerlink" title="Hybrid框架简介"></a>Hybrid框架简介</h1><p>采用Hybrid模式的原因：</p><ol><li>纯Native的迭代太慢，不能动态更新，且不能跨平台</li><li>纯Web页，有很功能无法实现，有些动画效果实现其体验太差</li></ol><h1 id="整体框架结构图"><a href="#整体框架结构图" class="headerlink" title="整体框架结构图"></a>整体框架结构图</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/24/2016-03-24-58同城Hybrid框架的点点滴滴/img_markdown/22.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/24/2016-03-24-58同城Hybrid框架的点点滴滴/img_markdown/24.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="WebView加载流程"><a href="#WebView加载流程" class="headerlink" title="WebView加载流程"></a>WebView加载流程</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/24/2016-03-24-58同城Hybrid框架的点点滴滴/img_markdown/23.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>在Step1里有两个作用：<ol><li>可以拦截html请求，对Html请求进行白名单的判断，只有规定域名的请求才能通过</li><li>转发一些如拨打电话请求，如tel:xxx</li></ol></li><li>在Step2里主要是显示Loading加载框</li><li>Step3：shouldInterceptRequest()<ol><li>此方法在Api为11时才有，即3.0以后才有此方法，所以在2.x系统里，无法劫持资源请求</li><li>主要用于拦截资源请求，让其走本地资源缓存，实现Native资源缓存机制</li></ol></li><li>Step4：onPageFinished()要等所有的资源都加载完成后，才会进行回调，但此时，界面早已经渲染出来了。</li><li>Loading界面消失的机制：<ol><li>在html界面渲染完后，js马上回调一个PageFinished的Action通知Native，提前消失掉Loading界面</li><li>如果没有等到PageFinished的Action，就在onPageFinished()方法里，把Loading界面消失掉</li></ol></li></ol><h1 id="跳转协议"><a href="#跳转协议" class="headerlink" title="跳转协议"></a>跳转协议</h1><p>现在的跳转协议是一个json格式，如下所示：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"action"</span>:<span class="string">"loadpage"</span>,</div><div class="line">    <span class="attr">"pagetype"</span>:<span class="string">"link"</span>,</div><div class="line">    <span class="attr">"url"</span>:<span class="string">"http://xxxx"</span>,</div><div class="line">    <span class="attr">"title"</span>:<span class="string">"标题"</span></div><div class="line">    <span class="string">"xxx"</span>:<span class="string">""</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>由于web页的Title是Native实现的，所以其标题需要从跳转协议里得到。</p><p>建议使用URL来做跳转协议，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jump://action/pagetype?url=xxx&amp;title=xxx</div></pre></td></tr></table></figure></p><p>好处：外部调起时，其协议就可以统一</p><h1 id="html拦截机制"><a href="#html拦截机制" class="headerlink" title="html拦截机制"></a>html拦截机制</h1><p>Native实现缓存的思路是：通过shouldInterceptRequest()拦截html的请求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/24/2016-03-24-58同城Hybrid框架的点点滴滴/img_markdown/25.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="js-css-image拦截机制"><a href="#js-css-image拦截机制" class="headerlink" title="js,css,image拦截机制"></a>js,css,image拦截机制</h1><p>机制和Html的一致，都是通过shouldInterceptRequest()拦截请求。</p><p>但并不是所有的请求都会进行拦截走缓存，满足如下两种规则走缓存：</p><ol><li><p>标准方式，通过在URL后面添加cachevers参数，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://xxx/xxx?cachevers=xx</div></pre></td></tr></table></figure></li><li><p>cdn的方式，URL满足cdn的格式也会走缓存，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://xxx/xxx_v版本号.xx</div></pre></td></tr></table></figure></li></ol><p>注意：整个缓存框架里，只认第一种格式，第二种cdn格式，会在shouldInterceptRequest()方法里进行转化为第一种格式，请求时，再转化为第二种格式</p><h1 id="html-js-css-image的缓存框架"><a href="#html-js-css-image的缓存框架" class="headerlink" title="html,js,css,image的缓存框架"></a>html,js,css,image的缓存框架</h1><h2 id="异步加载图片"><a href="#异步加载图片" class="headerlink" title="异步加载图片"></a>异步加载图片</h2><p>虽然shouldInterceptRequest()方法是在后台线程里执行的，但如果直接在此方法里，请求图片资源，那所有的图片资源都将是同步的方式加载，影响最终的加载速度，也会阻塞shouldInterceptRequest()方法的执行，从而阻塞webview的渲染。</p><p>解决思路：创建新的线程来请求图片资源，马上返回shouldInterceptRequest()方法，但如何实现呢？通过查看WebView的源码，找到了一种方式：使用管道，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> WebResourceResponse <span class="title">shouldInterceptRequest</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">    ParcelFileDescriptor[] pipe = ParcelFileDescriptor.createPipe(); <span class="comment">// 创建一个管道，一个出口，一个入口</span></div><div class="line">    <span class="keyword">new</span> TransferThread(context, uri, <span class="keyword">new</span> ParcelFileDescriptor.AutoCloseOutputStream(pipe[<span class="number">1</span>])).start();</div><div class="line">    AssetFileDescriptor assetFileDescriptor = <span class="keyword">new</span> AssetFileDescriptor(pipe[<span class="number">0</span>], <span class="number">0</span>, AssetFileDescriptor.UNKNOWN_LENGTH);</div><div class="line">    FileInputStream in = assetFileDescriptor.createInputStream();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebResourceResponse(type, <span class="string">"utf-8"</span>, in);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="缓存资源的版本号管理"><a href="#缓存资源的版本号管理" class="headerlink" title="缓存资源的版本号管理"></a>缓存资源的版本号管理</h2><p>缓存资源是通过其版本号来更新的，那资源的版本号应该存在哪里了？最直接的解决办法是：创建一个数据库，里面存储文件名与版本号的对应关系。我们最早也是这样实现的，这样会带来维护成本，还有其出错的概率。</p><p>最好的方案：把版本号与缓存文件存储在一起。</p><p>实现思路：不管缓存文件是文本文件，还是图片，在文件的开始位置写入一些Byte字节，这些Byte字节就存储了对应的版本号。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by maolei on 2015/9/8.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtraDiskCache</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FUNCTION = <span class="string">"diskCache"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/** Magic number for current version of cache file format. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CACHE_MAGIC = <span class="number">0x20150908</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NO_VALUE = <span class="string">"null"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/** The root directory to use for the cache. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> File mRootDirectory;</div><div class="line"></div><div class="line">    <span class="comment">// TODO clear file</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExtraDiskCache</span><span class="params">(File rootDirectory)</span></span>&#123;</div><div class="line">        mRootDirectory = rootDirectory;</div><div class="line">        <span class="keyword">if</span>(!mRootDirectory.exists())&#123;</div><div class="line">            mRootDirectory.mkdirs();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> File <span class="title">getFile</span><span class="params">(String fileName)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> File(mRootDirectory, fileName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">save</span><span class="params">(String fileName, Map&lt;String, String&gt; extraInfo, InputStream in)</span></span>&#123;</div><div class="line">        BufferedOutputStream fos = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// network inputstream need temp file;</span></div><div class="line">        File tempFile = getFile(fileName + <span class="string">"_temp"</span>);</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            fos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(tempFile));</div><div class="line">            <span class="keyword">if</span>(extraInfo != <span class="keyword">null</span> &amp;&amp; extraInfo.size() &gt; <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">boolean</span> success = writeHeader(fos, extraInfo);</div><div class="line">                <span class="keyword">if</span>(!success)&#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">            <span class="keyword">int</span> len;</div><div class="line">            <span class="keyword">while</span> ((len = in.read(buf)) &gt; <span class="number">0</span>) &#123;</div><div class="line">                fos.write(buf, <span class="number">0</span>, len);</div><div class="line">            &#125;</div><div class="line">            fos.flush();</div><div class="line">            File cacheFile = getFile(fileName);</div><div class="line">            <span class="keyword">if</span>(cacheFile.exists())&#123;</div><div class="line">                cacheFile.delete();</div><div class="line">            &#125;</div><div class="line">            tempFile.renameTo(cacheFile);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">            LOGGER.k(FUNCTION, <span class="string">"write data error"</span>, e);</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span>(in != <span class="keyword">null</span>)&#123;</div><div class="line">                    in.close();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</div><div class="line">                    fos.close();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(tempFile.exists())&#123;</div><div class="line">                    tempFile.delete();</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">                LOGGER.k(FUNCTION, <span class="string">"close stream error"</span>, e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getInfo</span><span class="params">(String fileName)</span></span>&#123;</div><div class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(getFile(fileName)));</div><div class="line">            <span class="keyword">return</span> readHeader(bis);</div><div class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">            LOGGER.k(FUNCTION, <span class="string">"getInfo error"</span>, e);</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span>(bis != <span class="keyword">null</span>)&#123;</div><div class="line">                    bis.close();</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">getContentStream</span><span class="params">(String fileName)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            File file = getFile(fileName);</div><div class="line">            BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">            <span class="keyword">if</span>(readHeader(bis) != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="comment">// current file has extra info, so return unread input stream</span></div><div class="line">                <span class="keyword">return</span> bis;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// current file is normal file, return origin input stream</span></div><div class="line">            bis.close();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">readHeader</span><span class="params">(InputStream in)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">int</span> magic = readInt(in);</div><div class="line">            <span class="keyword">if</span> (magic != CACHE_MAGIC) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> readStringStringMap(in);</div><div class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">writeHeader</span><span class="params">(OutputStream out, Map&lt;String, String&gt; extraInfo)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            writeInt(out, CACHE_MAGIC);</div><div class="line">            writeStringStringMap(extraInfo, out);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Simple wrapper around &#123;<span class="doctag">@link</span> java.io.InputStream#read()&#125; that throws EOFException</div><div class="line">     * instead of returning -1.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(InputStream is)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">int</span> b = is.read();</div><div class="line">        <span class="keyword">if</span> (b == -<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EOFException();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeInt</span><span class="params">(OutputStream os, <span class="keyword">int</span> n)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        os.write((n &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xff</span>);</div><div class="line">        os.write((n &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</div><div class="line">        os.write((n &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</div><div class="line">        os.write((n &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">(InputStream is)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</div><div class="line">        n |= (read(is) &lt;&lt; <span class="number">0</span>);</div><div class="line">        n |= (read(is) &lt;&lt; <span class="number">8</span>);</div><div class="line">        n |= (read(is) &lt;&lt; <span class="number">16</span>);</div><div class="line">        n |= (read(is) &lt;&lt; <span class="number">24</span>);</div><div class="line">        <span class="keyword">return</span> n;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeLong</span><span class="params">(OutputStream os, <span class="keyword">long</span> n)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        os.write((<span class="keyword">byte</span>)(n &gt;&gt;&gt; <span class="number">0</span>));</div><div class="line">        os.write((<span class="keyword">byte</span>)(n &gt;&gt;&gt; <span class="number">8</span>));</div><div class="line">        os.write((<span class="keyword">byte</span>)(n &gt;&gt;&gt; <span class="number">16</span>));</div><div class="line">        os.write((<span class="keyword">byte</span>)(n &gt;&gt;&gt; <span class="number">24</span>));</div><div class="line">        os.write((<span class="keyword">byte</span>)(n &gt;&gt;&gt; <span class="number">32</span>));</div><div class="line">        os.write((<span class="keyword">byte</span>)(n &gt;&gt;&gt; <span class="number">40</span>));</div><div class="line">        os.write((<span class="keyword">byte</span>)(n &gt;&gt;&gt; <span class="number">48</span>));</div><div class="line">        os.write((<span class="keyword">byte</span>)(n &gt;&gt;&gt; <span class="number">56</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">readLong</span><span class="params">(InputStream is)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">long</span> n = <span class="number">0</span>;</div><div class="line">        n |= ((read(is) &amp; <span class="number">0xFFL</span>) &lt;&lt; <span class="number">0</span>);</div><div class="line">        n |= ((read(is) &amp; <span class="number">0xFFL</span>) &lt;&lt; <span class="number">8</span>);</div><div class="line">        n |= ((read(is) &amp; <span class="number">0xFFL</span>) &lt;&lt; <span class="number">16</span>);</div><div class="line">        n |= ((read(is) &amp; <span class="number">0xFFL</span>) &lt;&lt; <span class="number">24</span>);</div><div class="line">        n |= ((read(is) &amp; <span class="number">0xFFL</span>) &lt;&lt; <span class="number">32</span>);</div><div class="line">        n |= ((read(is) &amp; <span class="number">0xFFL</span>) &lt;&lt; <span class="number">40</span>);</div><div class="line">        n |= ((read(is) &amp; <span class="number">0xFFL</span>) &lt;&lt; <span class="number">48</span>);</div><div class="line">        n |= ((read(is) &amp; <span class="number">0xFFL</span>) &lt;&lt; <span class="number">56</span>);</div><div class="line">        <span class="keyword">return</span> n;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeString</span><span class="params">(OutputStream os, String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] b = s.getBytes(<span class="string">"UTF-8"</span>);</div><div class="line">        writeLong(os, b.length);</div><div class="line">        os.write(b, <span class="number">0</span>, b.length);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">readString</span><span class="params">(InputStream is)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = (<span class="keyword">int</span>) readLong(is);</div><div class="line">        <span class="keyword">byte</span>[] b = streamToBytes(is, n);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(b, <span class="string">"UTF-8"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeStringStringMap</span><span class="params">(Map&lt;String, String&gt; map, OutputStream os)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span>(map == <span class="keyword">null</span> || map.size() == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        writeInt(os, map.size());</div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</div><div class="line">            writeString(os, entry.getKey());</div><div class="line">            String value = entry.getValue();</div><div class="line">            <span class="keyword">if</span>(TextUtils.isEmpty(value))&#123;</div><div class="line">                writeString(os, NO_VALUE);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                writeString(os, entry.getValue());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">readStringStringMap</span><span class="params">(InputStream is)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">int</span> size = readInt(is);</div><div class="line">        <span class="keyword">if</span>(size &lt;= <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        Map&lt;String, String&gt; result = <span class="keyword">new</span> HashMap&lt;String, String&gt;(size);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            String key = readString(is).intern();</div><div class="line">            String value = readString(is).intern();</div><div class="line">            <span class="keyword">if</span>(NO_VALUE.equals(value))&#123;</div><div class="line">                value = <span class="string">""</span>;</div><div class="line">            &#125;</div><div class="line">            result.put(key, value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Reads the contents of an InputStream into a byte[].</div><div class="line">     * */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] streamToBytes(InputStream in, <span class="keyword">int</span> length) <span class="keyword">throws</span> IOException &#123;</div><div class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</div><div class="line">        <span class="keyword">int</span> count;</div><div class="line">        <span class="keyword">int</span> pos = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (pos &lt; length &amp;&amp; ((count = in.read(bytes, pos, length - pos)) != -<span class="number">1</span>)) &#123;</div><div class="line">            pos += count;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (pos != length) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Expected "</span> + length + <span class="string">" bytes, read "</span> + pos + <span class="string">" bytes"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bytes;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="相关的类"><a href="#相关的类" class="headerlink" title="相关的类"></a>相关的类</h2><ol><li>WebResLoader：资源加载类，负责：异步加载，同步加载</li><li>WebResCacheManager：资源管理类，负责：资源保存，加载，资源版本管理</li></ol><h1 id="交互框架"><a href="#交互框架" class="headerlink" title="交互框架"></a>交互框架</h1><p>现在的交互方式有：</p><ol><li>通过webview的addJavascriptInterface()方法交互<br> 优点：简单，Js可以获取返回值，从Api 1开始支持。<br> 缺点：不安全，js可以通过此漏洞调用用户手机里的很多功能</li><li>使用会在shouldInterceptRequest()方法交互<br> 优点：安全<br> 缺点：从Api11(即3.0)才支持，不支持js获取返回值</li></ol><p>交互协议如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"action"</span>:<span class="string">"xxx"</span>,</div><div class="line">    <span class="attr">"xxx"</span>:<span class="string">"xxx"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用的是json协议，其中的action区分事件类型</p><p>具体的交互框架：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/24/2016-03-24-58同城Hybrid框架的点点滴滴/img_markdown/26.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><ol><li>每一个Action协议会有对应的Bean, Parser, ActionCtrl。都是一一对应的</li><li>ActionCtrl都在在具体的Fragment载体页进行注册，只有先注册过的Action，才会有相应的处理</li><li>在MessageBaseFragment里注册的Action为通用Action，所有的载体页都支持</li></ol><p><strong>Bean对象合法检测</strong>：在action协议解析完成后会生成一个Bean对象，所有的Bean对象都继承自ActionBean基类，在ActionBean类中新增checkWebAction()方法，以及check()抽象方法，由子类实现check()方法实现子类自己的协议检测。checkWebAction()方法执行所有ActionBean的通用检测，并在checkWebAction()方法中调用check()方法，执行子类自检。</p><h1 id="WebView的载体页"><a href="#WebView的载体页" class="headerlink" title="WebView的载体页"></a>WebView的载体页</h1><ol><li>按业务分，创建了不同的载体页，即有多个MessageBaseFragment的子类。（58当前使用的方式）<br> 优点：App开发载体页简单，单个载体页不会变的非常庞大，易于维护<br> 缺点：<ol><li>载体页过多，前端人员在写跳转协议时，要区分跳转到哪个web载体页</li><li>每个载体页支持的action协议是不一样的，造成很多不兼容问题，影响了后期的扩展性</li><li>维护成本加大了</li></ol></li><li>一个载体页，支持所有的Action协议，支持所有的业务。（Hybrid二期会改为此种方式）<br> 优点和缺点刚好和上面的方式相反，推荐使用此种方式</li></ol><h1 id="Cookie，Header"><a href="#Cookie，Header" class="headerlink" title="Cookie，Header"></a>Cookie，Header</h1><p>通过webview加载html的方式，有下面两种方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 直接加载url</div><div class="line">webview.loadUrl(String url) </div><div class="line"></div><div class="line">// 在加载url时，要添加header头信息，注意：此方法在2.2时，才添加了</div><div class="line">webview.loadUrl (String url, Map&lt;String, String&gt; additionalHttpHeaders)</div></pre></td></tr></table></figure></p><p>通过上面的方法直接加载Html页面时，会自动把cookie添加，那我们带一些参数给Server的方式就有两种：</p><ol><li>通过cookie来带数据</li><li>2.2以后，通过Header带数据</li></ol><p>经验：</p><ol><li>两个同时都带，cookie和header都带相同的数据</li><li>在有一些Android手机里，其cookie总是上传不成功，通过抓包发现根本没有cookie信息。（之后证实发现用户其他app也无法使用cookie）</li><li>Header是完全可以保证数据不丢失的方式，但由于javascript发出的请求，都无法带上header，所以还是要使用cookie</li></ol><h1 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h1><p>所谓的白名单是指：不在白名单内的请求，不进行加载，或者弹出一个Dialog，提示用户。</p><p>实现思路：</p><ol><li>本地有一个白名单列表，可以更新此列表。<strong>注意</strong>：列表里指保存域名</li><li>在WebViewClient的shouldOverrideUrlLoading()方法里，进行拦截判断。<strong>注意</strong>：判断时，要考虑一级域名，二级域名等等。</li></ol><h1 id="WebView添加额外功能"><a href="#WebView添加额外功能" class="headerlink" title="WebView添加额外功能"></a>WebView添加额外功能</h1><p>WebView默认情况下缺少很多功能：</p><ol><li>不能图片上传</li><li>不能进行文件下载</li><li>不能拨打电话等等调用系统其他组件</li></ol><p><strong>图片上传功能</strong>：分为两种，一种通过相册选择，再上传；一种是拍照后，再上传。这两种都能支持，方法可以直接搜索就可以了。问题：有部分手机无法调启上传，机型支持问题，解决方案：通过Action，由native来做上传</p><p><strong>文件下载</strong>：原生不支持下载的URL，把下载URL，支持转发到浏览器，进行下载。最好不要支持url支持下载。58现在不支持</p><p><strong>调用通用组件</strong>：在shouldOverrideUrlLoading()进行通用处理，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (url.startsWith(<span class="string">"http:"</span>) || url.startsWith(<span class="string">"https:"</span>) || url.startsWith(<span class="string">"file:"</span>)) &#123;</div><div class="line">            <span class="comment">// Html请求</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 其他的通用处理</span></div><div class="line">        view.getContext().startActivity(<span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(url)));</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        LOGGER.e(TAG, <span class="keyword">null</span>, e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hybrid框架简介&quot;&gt;&lt;a href=&quot;#Hybrid框架简介&quot; class=&quot;headerlink&quot; title=&quot;Hybrid框架简介&quot;&gt;&lt;/a&gt;Hybrid框架简介&lt;/h1&gt;&lt;p&gt;采用Hybrid模式的原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;纯Native的迭代
      
    
    </summary>
    
      <category term="Android" scheme="https://handsomeliuyang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://handsomeliuyang.github.io/tags/Android/"/>
    
      <category term="开发模式" scheme="https://handsomeliuyang.github.io/tags/%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android收藏的好文章</title>
    <link href="https://handsomeliuyang.github.io/2016/03/22/2016-03-22-Android%E6%94%B6%E8%97%8F%E7%9A%84%E5%A5%BD%E6%96%87%E7%AB%A0/"/>
    <id>https://handsomeliuyang.github.io/2016/03/22/2016-03-22-Android收藏的好文章/</id>
    <published>2016-03-22T02:42:49.000Z</published>
    <updated>2016-10-15T10:03:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><ol><li><a href="http://www.jianshu.com/p/a63700cb7720#rd" target="_blank" rel="noopener">这些小工具让你的Android开发更高效</a></li><li>分析内存溢出：<a href="https://github.com/square/leakcanary" target="_blank" rel="noopener">LeakCanary</a></li><li>分析ANR异常：<a href="http://blog.zhaiyifan.cn/2016/01/16/BlockCanaryTransparentPerformanceMonitor/" target="_blank" rel="noopener">BlockCanary</a></li><li><a href="https://github.com/skylot/jadx" target="_blank" rel="noopener">反编译工具</a></li><li><a href="https://github.com/AndroidKnife/XposedDebug" target="_blank" rel="noopener">调试Android应用</a></li></ol><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=2653577211&amp;idx=1&amp;sn=2619c7df79f675e45e87891b7eb17669&amp;scene=0&amp;key=f8ab7b995657050bc4a1b92937a4b37542e2220f853509bfd0e4787e7c52fd1b257dd2637f83bc26b7f47aca8bfbf12d&amp;ascene=0&amp;uin=MTQ0OTAxODc2MA%3D%3D&amp;devicetype=iMac+MacBookPro9%2C2+OSX+OSX+10.11.4+build(15E65" target="_blank" rel="noopener">Android自绘动画实现与优化实战——以Tencent OS录音机波形动画为实例</a>&amp;version=11020201&amp;pass_ticket=iySX2uzbIVQ3hWQPwrlLeaRxz4EgosUgwZ2MCUEZd4Q0KD01oC00QE3N0zbNuRoL)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;工具类&quot;&gt;&lt;a href=&quot;#工具类&quot; class=&quot;headerlink&quot; title=&quot;工具类&quot;&gt;&lt;/a&gt;工具类&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/a63700cb7720#rd&quot; target=&quot;_
      
    
    </summary>
    
      <category term="Android" scheme="https://handsomeliuyang.github.io/categories/Android/"/>
    
    
      <category term="收藏" scheme="https://handsomeliuyang.github.io/tags/%E6%94%B6%E8%97%8F/"/>
    
      <category term="Android" scheme="https://handsomeliuyang.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Markdown常用语法</title>
    <link href="https://handsomeliuyang.github.io/2016/03/17/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <id>https://handsomeliuyang.github.io/2016/03/17/markdown常用语法/</id>
    <published>2016-03-17T05:05:47.000Z</published>
    <updated>2016-08-13T08:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/17/markdown常用语法/img_markdown/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/17/markdown常用语法/img_markdown/15.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/17/markdown常用语法/img_markdown/16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>注意：</strong> 序列的缩进使用Tab键或四个空格</p><h1 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h1><p>换行就直接空一行就行</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/17/markdown常用语法/img_markdown/17.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>注意：</strong> 如果代码里有空行，会影响markdown排版，可以使用字符 ”[空行]“ 来替换</p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/17/markdown常用语法/img_markdown/18.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/17/markdown常用语法/img_markdown/19.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>注意：</strong> hexo里添加图片的方式：在source文件下创建一个img的文件夹，在md里引用的路径：/img/xxx.png</p><h1 id="加粗、斜体"><a href="#加粗、斜体" class="headerlink" title="加粗、斜体"></a>加粗、斜体</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/17/markdown常用语法/img_markdown/20.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h1&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;

      
    
    </summary>
    
      <category term="hexo" scheme="https://handsomeliuyang.github.io/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>托管博客到Coding</title>
    <link href="https://handsomeliuyang.github.io/2016/03/16/%E6%89%98%E7%AE%A1%E5%8D%9A%E5%AE%A2%E5%88%B0Coding/"/>
    <id>https://handsomeliuyang.github.io/2016/03/16/托管博客到Coding/</id>
    <published>2016-03-16T14:01:41.000Z</published>
    <updated>2016-08-13T08:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>github上push代码，访问速度都比较慢，所以决定迁移到国内的Git托管服务：Coding</p><h1 id="迁移Repository步骤："><a href="#迁移Repository步骤：" class="headerlink" title="迁移Repository步骤："></a>迁移Repository步骤：</h1><ol><li>进入Coding站点：<a href="https://coding.net" target="_blank" rel="noopener">https://coding.net</a>，申请帐号</li><li>创建一个Project，如下设置：<ol><li>项目名称为<strong>用户名</strong></li><li>设置为公开</li><li>使用【导入仓库】功能，把github上的仓库导入进来</li></ol></li><li>从master分支创建一个<strong>coding-pages</strong>分支，并设置其为默认分支</li><li>并已<strong>coding-pages</strong>为分支，打开Pages服务</li><li>即可以访问自己的博客：<a href="http://用户名.coding.me" target="_blank" rel="noopener">http://用户名.coding.me</a></li><li>修改hexo里的_config.yml文件里的布署，修改如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@git.coding.net:handsomeliuyang/handsomeliuyang.git</div><div class="line">  branch: coding-pages</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h1&gt;&lt;p&gt;github上push代码，访问速度都比较慢，所以决定迁移到国内的Git托管服务：Coding&lt;/p&gt;
&lt;h1 id=&quot;迁移Reposito
      
    
    </summary>
    
      <category term="hexo" scheme="https://handsomeliuyang.github.io/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Gradle分享</title>
    <link href="https://handsomeliuyang.github.io/2016/03/16/Gradle%E5%88%86%E4%BA%AB/"/>
    <id>https://handsomeliuyang.github.io/2016/03/16/Gradle分享/</id>
    <published>2016-03-16T10:15:29.000Z</published>
    <updated>2016-08-13T08:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gradle是什么"><a href="#Gradle是什么" class="headerlink" title="Gradle是什么"></a>Gradle是什么</h1><ol><li>Gradle是一个自动化构建工具，用来替换ant及maven。</li><li>Gradle的特点：<ol><li>具有表达性的语言和强大的API（Gradle的表达性语言称为DSL）</li><li>Gradle就是Groovy，但高于Groovy</li><li>灵活的约定（所有的配置属性都有其默认值，但也可以全部进行配置）</li><li>和其他构建工具的集成（可以与Ant，Maven集成，迁移成功比较低）</li><li>强大的依赖管理（Gradle没有其专有的依赖管理工具，但其兼容Ivy及Maven）</li><li>扩展非常方便</li></ol></li><li>Groovy与Java的关系：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/16/Gradle分享/img_markdown/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ol><h1 id="Gradle的脚本里的语法"><a href="#Gradle的脚本里的语法" class="headerlink" title="Gradle的脚本里的语法"></a>Gradle的脚本里的语法</h1><h2 id="Gradle脚本例子"><a href="#Gradle脚本例子" class="headerlink" title="Gradle脚本例子"></a>Gradle脚本例子</h2><p>脚本build.gradle, 如：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> hello1 &lt;&lt; &#123;</div><div class="line">    <span class="keyword">println</span> <span class="string">'hello1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面的代码使用DSL定义了一个Task</p><ol><li>问题：什么是DSL，其与groovy的关系是什么？<br> 解答：<ol><li>DSL分为两类：外部DSL和内部DSL。外部DSL是一种独立的可解析的语言，举一个最常见的是例子，SQL，它专注于数据库的操作。内部DSL是通用语言所暴露的用来执行特定任务的API，它利用语言本身的特性，将API以特殊的形式（或者格式）暴露出来的，如Gradle。</li><li>Gradle是内部DSL，其实就是一套API，对应其Groovy的对象。定义DSL的目的，是使Gradle看上去更像脚本语言。</li><li>Gradle基于Groovy但大于Groovy，它是经过“定制”的Groovy，是经过“定制”的面向对象语言，所以，由始至终，Gradle都离不开对象这个概念。</li></ol></li><li>上面的Gradle脚本转化为对应的Groovy对象来理解：<ol><li>有一个Project对象，其有一个task方法，返回一个Task对象，如Project.task(String name)</li><li>hello1是一个String的参数</li><li>符号“&lt;&lt;”是操作符重载。Task.leftShift(Closure action)，用来给task的action列表中添加一个action。</li></ol></li><li>转化为Groovy代码的写法：<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span>(<span class="string">"hello1"</span>).<span class="keyword">leftShift</span>(&#123;</div><div class="line">    <span class="keyword">println</span> <span class="string">'hello world'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></li></ol><h2 id="Gradle的DSL与API对应"><a href="#Gradle的DSL与API对应" class="headerlink" title="Gradle的DSL与API对应"></a>Gradle的DSL与API对应</h2><p>既然DSL是一套API，用来对应Groovy里的对象的，那主要有哪些对象了。</p><pre><code>1. DSL文档：https://docs.gradle.org/current/dsl/，Java文档：https://docs.gradle.org/current/javadoc/2. Gradle对象，运行脚时，第一个创建的对象3. 每个build.gradle脚本对应Project对象4. 每个task都是interface Task的子类，上面创建的hello1是DefaultTask的对象5. 在build.gradle里可以使用DSL写代码，也可以使用Java语法或Groovy语法来写代码。</code></pre><h2 id="定义Task的几种方法"><a href="#定义Task的几种方法" class="headerlink" title="定义Task的几种方法"></a>定义Task的几种方法</h2><ol><li>使用DSL方式来定义<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/16/Gradle分享/img_markdown/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure> 特点：<ol><li>都是DefaultTask类的子类</li><li>都是相当于调用doLast()方法，把闭包传入一个队列里，当task的方法执行完后，再进行调用，和Android的Hander比较类似。</li><li>注意：上面都不是方法定义，都是方法调用，</li></ol></li><li>自定义Task类和方法<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/16/Gradle分享/img_markdown/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure> 特点：<ol><li>由于Gradle使用的是Groovy，所以只有在定义类时，才能定义方法，其他DSL里的，都是调用方法。</li><li>由于Gradle是一种脚本语言，其运行时，不用手动将java类转化为class文件，才能执行，而是可以直接编译，解释执行。</li></ol></li></ol><h2 id="Android-Gradle插件相关："><a href="#Android-Gradle插件相关：" class="headerlink" title="Android-Gradle插件相关："></a>Android-Gradle插件相关：</h2><ol><li>Android插件的DSL：<a href="http://google.github.io/android-gradle-dsl/" target="_blank" rel="noopener">http://google.github.io/android-gradle-dsl/</a></li></ol><h1 id="Gradle的生命周期"><a href="#Gradle的生命周期" class="headerlink" title="Gradle的生命周期"></a>Gradle的生命周期</h1><h2 id="gradle运行例子"><a href="#gradle运行例子" class="headerlink" title="gradle运行例子"></a>gradle运行例子</h2><p>当我们有一个build.gradle的脚本，内容如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> helloWorld &lt;&lt; &#123;</div><div class="line">    <span class="keyword">println</span> <span class="string">'hello, world'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>执行Task:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ gradle -q helloWorld</div><div class="line">hello, world</div></pre></td></tr></table></figure></p><h2 id="Gradle的底层运行过程："><a href="#Gradle的底层运行过程：" class="headerlink" title="Gradle的底层运行过程："></a>Gradle的底层运行过程：</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/16/Gradle分享/img_markdown/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Task相关"><a href="#Task相关" class="headerlink" title="Task相关"></a>Task相关</h1><ol><li>为了方便对编译过程进行干预，每个Task都有一个doFirst()和doLast()方法，可以不断的给Task的两个执行对列添加闭包对象，等Task执行时，再依次执行，如下图所示：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/16/Gradle分享/img_markdown/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>可以访问DefaultTask里的任何属性，在Groovy里，属性会自动创建对应的getXXX()，setXXX()方法</li><li>默认创建的task对象，都是DefaultTask类的对象，可以修改其对象类型，如下：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/16/Gradle分享/img_markdown/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>Task之间可以创建其依赖，等特其他Task执行完之后，再进行执行，定义依赖：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/16/Gradle分享/img_markdown/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>理解Task的配置阶段及执行阶段<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/16/Gradle分享/img_markdown/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>task的inputs及outputs</li></ol><p>判断一个Task是否执行，是通过判断其inputs及outputs是否有改动，如果有改动时，才会执行。<br>定议Task的的inputs和outputs是在定义Task类时，通过注解添加的，对应DefaultTask里有两个属性：inputs: TaskInputs  outputs: TaskOutputs<br>通过gradle xxx -d可以看到task的inputs及outputs</p><h1 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h1><ol><li>为什么要引入依赖管理？<br> 没有引入依赖管理时，我们会遇到的一些问题：<ol><li>Eclipse开发Android阶段，对于jar的引入，需要手动去下载</li><li>依赖的jar如果还关系其他jar，也需要进行引入</li><li>如果jar有变动时，通知使用方去修改，也比较麻烦</li><li>经常出现依赖jar版本不合适的问题<br>依赖管理就是为了解上面这些问题，而引入的。</li></ol></li><li>Gradle的依赖管理，Maven仓库，本地依赖缓存<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/16/Gradle分享/img_markdown/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure> 总结：<ol><li>Android-Cradle插件的Maven仓库地址：<a href="http://mvnrepository.com/artifact/com.android.tools.build/gradle" target="_blank" rel="noopener">http://mvnrepository.com/artifact/com.android.tools.build/gradle</a></li><li>58同城的Maven仓库地址：<a href="http://artifactory.58corp.com:8081/artifactory/webapp/browserepo.html?6" target="_blank" rel="noopener">http://artifactory.58corp.com:8081/artifactory/webapp/browserepo.html?6</a></li><li>本地的依赖缓存的地址：.gradle/caches/modules-2/files-2.1<ol><li>查看本地缓存地址的方法：输出configurations里的dependency对象，就可以知道其保存地址</li><li>通过gradle xxx -d输出完整地址，仔细去读里面的日志，也可以知道其保存地址</li></ol></li></ol></li><li>外部模块依赖<br> 外部模块依赖的属性：<ol><li>group：用来标识一个公司，组织或者项目，通常的做法是：公司的域名反写。如：com.wuba.wuxian.lib</li><li>name：一个模块的名称，一个group内要唯一。如：WubaCommonsLib</li><li>version：版本号，如：2.0.0，3.6.3-Final，2.0.0-SNAPSHOT等等。所以版本号不是int类型，是String类型</li><li>classifier：如果group,name,version都一样时，用于区分的。如jar的源码，javadoc等等<br>如例子：</li><li>com.wuba.wuxian.lib:WubaCommonsLib:2.0.0-SNAPSHOT</li><li>com.wuba.wuxian.lib:WubaCommonsLib:2.0.0-javadoc</li><li>com.wuba.wuxian.lib:WubaCommonsLib:2.0.0-sources</li></ol></li><li>依赖冲突的解决方案<br> 冲突出现的情况<ol><li>a库和b库都关系同一个c库<br>解决方案：gradle的依赖管理会自动使用最新的c库，不会使用两次c库</li><li>a库关联b库，同时关联c的源码，b库关系c库的aar<br>问题原因：c的源码库及c库的aar不是同一个库，会当作不同的库进行处理，因为其group不一样<br>解决方案：</li><li>只引入b库的aar，不引入b库的关联库c，如下所示：<br><img src="/2016/03/16/Gradle分享/img_markdown/10.png" alt=""></li><li>使用排除法，排除b库的c库就行，如下所示：<br><img src="/2016/03/16/Gradle分享/img_markdown/11.png" alt=""></li><li>更多的配置文档：<a href="https://docs.gradle.org/current/javadoc/" target="_blank" rel="noopener">https://docs.gradle.org/current/javadoc/</a>里的DependencyHandler</li></ol></li><li>灵活的版本号及本地缓存更新<br> 如果想一直使用最新版本，可以使用动态版本本声明：com.wuba.wuxian.lib:WubaCommonsLib:2.0.0+，但希望不要这样使用，如果最新的版本，其兼容有问题，这样会影响现有代码运行。<br> 如果正在开发调试WubaCommonsLib期间，这时，定义版本号时，可以使用快照版本号，-SNAPSHOT。把版本号定义为-SNAPSHOT时，gradle的依赖管理，会使用最新的快照库<br> 如果本地版本库有缓存后，如果想使用最新的依赖版本，这时，就要修改本地缓存策略，如下所示：<br> <img src="/2016/03/16/Gradle分享/img_markdown/12.png" alt=""></li></ol><h1 id="参与文档："><a href="#参与文档：" class="headerlink" title="参与文档："></a>参与文档：</h1><ol><li>Gradle深入与实战：<a href="http://benweizhu.github.io/blog/2015/03/31/deep-into-gradle-in-action-6/" target="_blank" rel="noopener">http://benweizhu.github.io/blog/2015/03/31/deep-into-gradle-in-action-6/</a></li><li>《实战Gradle》</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Gradle是什么&quot;&gt;&lt;a href=&quot;#Gradle是什么&quot; class=&quot;headerlink&quot; title=&quot;Gradle是什么&quot;&gt;&lt;/a&gt;Gradle是什么&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Gradle是一个自动化构建工具，用来替换ant及maven。&lt;/li&gt;
      
    
    </summary>
    
      <category term="Android" scheme="https://handsomeliuyang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://handsomeliuyang.github.io/tags/Android/"/>
    
      <category term="Gradle" scheme="https://handsomeliuyang.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="https://handsomeliuyang.github.io/2016/03/16/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://handsomeliuyang.github.io/2016/03/16/Hexo搭建个人博客/</id>
    <published>2016-03-16T06:08:36.000Z</published>
    <updated>2016-08-13T08:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><ol><li>Github配置<ol><li>在Github上申请一个帐号</li><li>创建一个repository，其命名规则有两种<ol><li>&lt;你的用户名&gt;.github.io // 那你的博客地址就是 http://&lt;你的用户名&gt;.github.io <strong>推荐</strong></li><li>&lt;任意名称&gt;  // 那你的博客地址将是：http://&lt;你的用户名&gt;.github.io/&lt;任意名称&gt;</li></ol></li><li>使用ssh连接，配置ssh的公钥和私钥，以后连接github不用再输入密码</li></ol></li><li>Hexo安装<ol><li>请按最新官网安装并配置Hexo，具体请看：<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></li><li>使用如下命令，搭建本地Server：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean  // 清除刚刚创建的静态web网页</div><div class="line">hexo g  // hexo generator的缩写，生成静态web网页，生成的目录是：public</div><div class="line">hexo s  // hexo server的缩写，生成本地web服务器，可以访问，查看效果</div></pre></td></tr></table></figure></li></ol></li></ol><ol><li>开发环境<ol><li>下载webstorm</li><li>给webstorm安装markdown插件</li><li>通过webstorm加载hexo</li></ol></li><li>Hexo的目录结构<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2016/03/16/Hexo搭建个人博客/img_markdown/13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p>Hexo的配置</p><ol><li>在_config.yml里设置如下参数：<ol><li>title</li><li>subtitle</li><li>description</li><li>author</li><li>email</li><li>language</li></ol></li><li><p>在_config.yml里配置github的服务器及主分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:xxx</div><div class="line">  branch: master</div></pre></td></tr></table></figure></li><li><p>在_config.yml里配置主题和对css文件等等的压缩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">theme: jacman // 这个是我使用的主题，你可以在网上下载更多的主题</div><div class="line">stylus:</div><div class="line">  compress: true // 对样式文件进行压缩</div></pre></td></tr></table></figure></li><li><p>按官网教程安装Hexo后，执行hexo d命令会报错，是由于缺少Module库，执行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure><p>安装之后，就可以执行hexo d进行部署了  </p></li></ol></li><li><p>写博客</p><ol><li><p>使用如下命令创建新的文章：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;文章名称&quot;</div></pre></td></tr></table></figure></li><li><p>在source文件下，创建一个存放图片目录，如img，在文章里引用的地址为：/img/图片名</p></li><li>在目录source/_posts目录下找到文件，并编辑</li><li>文章可以设置categories(类别)和tags(标签)，<strong>注意</strong>：tags下面只能是3个横线，多了少了都不行</li></ol></li><li>查看效果<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g</div><div class="line">hexo s</div><div class="line">[空行]</div><div class="line">hexo d // hexo deployer的缩写 发布到Github</div></pre></td></tr></table></figure></li></ol><h1 id="Hexo备份"><a href="#Hexo备份" class="headerlink" title="Hexo备份"></a>Hexo备份</h1><p><strong>使用Github来备份</strong></p><ol><li>在github上创建一个hexo的分支</li><li>把本地的hexo项目上传到hexo分支里，但注意配置.gitignore文件，如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.DS_Store</div><div class="line">Thumbs.db</div><div class="line">db.json</div><div class="line">*.log</div><div class="line">node_modules/</div><div class="line">public/</div><div class="line">.deploy*/</div><div class="line">.idea</div></pre></td></tr></table></figure><h1 id="添加新功能"><a href="#添加新功能" class="headerlink" title="添加新功能"></a>添加新功能</h1><ol><li>改主题，我使用的是jacman</li><li><p>添加关于，使用如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page &quot;about&quot; // 这样创建md文件，才能使用/about来引用到</div></pre></td></tr></table></figure></li><li><p>添加百度统计，用于统计网站流量</p></li><li>添加站内搜索</li><li>添加评价，推荐使用<strong>多说</strong></li><li>添加百度搜索、google搜索</li><li>添加sitemap.xml，供搜索引擎的爬虫使用</li></ol><h1 id="hexo发布新文章"><a href="#hexo发布新文章" class="headerlink" title="hexo发布新文章"></a>hexo发布新文章</h1><p>方法一：</p><ol><li><p>创建文章，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;文章名称&quot;</div></pre></td></tr></table></figure></li><li><p>在source/_posts目录下，就会创建此文章，编译完成后，部署，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo d -g // 相当于先执行hexo g 再执行hexo d</div></pre></td></tr></table></figure></li></ol><p>方法二：</p><ol><li><p>新创建草稿，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new draft &quot;文章名称&quot;</div></pre></td></tr></table></figure></li><li><p>在source/_drafts目录下，会创建相应的文章，编写文章，草稿文章默认情况下，不会被部署到站点里</p></li><li>把草稿发布为文章，命令如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo publish &quot;草稿文章名称&quot;</div></pre></td></tr></table></figure></li></ol><h1 id="F-amp-Q"><a href="#F-amp-Q" class="headerlink" title="F&amp;Q"></a>F&amp;Q</h1><h2 id="图片支持"><a href="#图片支持" class="headerlink" title="图片支持"></a>图片支持</h2><p><a href="https://codefalling.com/2015/12/19/no-pains-with-hexo-local-image/" target="_blank" rel="noopener">https://codefalling.com/2015/12/19/no-pains-with-hexo-local-image/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建过程&quot;&gt;&lt;a href=&quot;#搭建过程&quot; class=&quot;headerlink&quot; title=&quot;搭建过程&quot;&gt;&lt;/a&gt;搭建过程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Github配置&lt;ol&gt;
&lt;li&gt;在Github上申请一个帐号&lt;/li&gt;
&lt;li&gt;创建一个repository，
      
    
    </summary>
    
      <category term="hexo" scheme="https://handsomeliuyang.github.io/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo理解</title>
    <link href="https://handsomeliuyang.github.io/2016/03/16/hexo%E7%90%86%E8%A7%A3/"/>
    <id>https://handsomeliuyang.github.io/2016/03/16/hexo理解/</id>
    <published>2016-03-16T03:03:16.000Z</published>
    <updated>2016-08-13T08:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo是什么"><a href="#Hexo是什么" class="headerlink" title="Hexo是什么"></a>Hexo是什么</h1><blockquote><p>A fast, simple &amp; powerful blog framework, powered by Node.js. 基于Node.js的一个快速、简洁且高效的博客框架。</p></blockquote><p>我理解的Hexo是：</p><ol><li>是一个Node.js的命令行脚本工具</li><li>一个把markdown编译为html页面，生成一个静态Web网站的静态博客框架</li></ol><h2 id="命令行脚本工具"><a href="#命令行脚本工具" class="headerlink" title="命令行脚本工具"></a>命令行脚本工具</h2><p>使用Node.js除了用来开发Web应用外，还可以用于开发命令行脚本工具，Hexo就是一个使用Node.js开发命令行脚本工具：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install XXX -g // 脚本Module只能通过全局方式添加</div></pre></td></tr></table></figure></p><p>关于Nodejs开发命令行工具的教程：<a href="http://javascriptplayground.com/blog/2015/03/node-command-line-tool" target="_blank" rel="noopener">使用Node写命令行工具</a></p><h2 id="静态博客框架"><a href="#静态博客框架" class="headerlink" title="静态博客框架"></a>静态博客框架</h2><p>Hexo的框架使用node.js，把markdown, ejs翻译为纯Html页面，这些纯Html页面只需要布署到Web服务器上就行了。 </p><h1 id="Hexo的源码，官网，Module"><a href="#Hexo的源码，官网，Module" class="headerlink" title="Hexo的源码，官网，Module"></a>Hexo的源码，官网，Module</h1><ol><li>Hexo的源码：<a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></li><li>Hexo的官网：<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></li><li>Hexo在npm上的Module：<a href="https://www.npmjs.com/package/hexo" target="_blank" rel="noopener">https://www.npmjs.com/package/hexo</a></li></ol><h1 id="Hexo版本"><a href="#Hexo版本" class="headerlink" title="Hexo版本"></a>Hexo版本</h1><p>Hexo现在的版本主要有2.x及3.x，这两个版本有比较大的差别，其主要差别如下：</p><ol><li><p>3.x里多了hexo-cli模块，从hexo里分离了，其中全部是命令行的工具。// 这个就是我之前想不通的，为什么会有如下两种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo -g // 这个是2.x的安装方式，不过3.x也可以用</div><div class="line">npm install hexo-cli -g // 这个就是3.x的标准安装方式</div></pre></td></tr></table></figure></li><li><p>3.x里把hexo模块分为Generators, deployers, server几种模块 // 这就是为什么在2.x里，可以直接使用hexo deployer，而在3.x里你要先安装deployers的模块，才能执行hexo deployer</p></li><li>更多差别，请查看：<a href="https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0" target="_blank" rel="noopener">https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0</a></li></ol><p><em>特别注意：</em>有些themes主题只支持hexo 2.x，要注意选择。</p><h1 id="Hexo与Github的关系"><a href="#Hexo与Github的关系" class="headerlink" title="Hexo与Github的关系"></a>Hexo与Github的关系</h1><ol><li>Hexo会生成一个静态的web网站</li><li>Github Pages就是相当于一个web服务器</li><li>Github本身的git相当于FTP命令，让我们把web网站资源上传到web服务器上</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo是什么&quot;&gt;&lt;a href=&quot;#Hexo是什么&quot; class=&quot;headerlink&quot; title=&quot;Hexo是什么&quot;&gt;&lt;/a&gt;Hexo是什么&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;A fast, simple &amp;amp; powerful blog fr
      
    
    </summary>
    
      <category term="hexo" scheme="https://handsomeliuyang.github.io/categories/hexo/"/>
    
    
  </entry>
  
</feed>
